#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef RKRTC_SWIFT_H
#define RKRTC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
@import RKSocket;
@import WebRTC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RKRTC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC5RKRTC17RKAVAnalysisModel")
@interface RKAVAnalysisModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic) int32_t packetsLost;
@property (nonatomic, copy) NSString * _Nonnull rid;
@property (nonatomic) int32_t width;
@property (nonatomic) int32_t height;
@property (nonatomic) int32_t fps;
@property (nonatomic) int32_t bitrate;
@property (nonatomic) float lossRate;
@property (nonatomic, copy) NSString * _Nonnull qualityLimitationReason;
@property (nonatomic) double audioLevel;
@property (nonatomic) double totalAudioEnergy;
@property (nonatomic) double totalSamplesDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RKNetworkQualityState : int32_t;

SWIFT_PROTOCOL("_TtP5RKRTC19RKAVQualityListener_")
@protocol RKAVQualityListener <NSObject>
/// 远端音频参数回调
- (void)onRemoteAudioStatus:(NSString * _Nonnull)userId audioLevel:(double)audioLevel totalAudioEnergy:(double)totalAudioEnergy totalSamplesDuration:(double)totalSamplesDuration packetsLost:(int32_t)packetsLost;
- (void)onRemoteVideoStatus:(NSString * _Nonnull)userId rid:(NSString * _Nullable)rid width:(int32_t)width height:(int32_t)height fps:(int32_t)fps bitrate:(int32_t)bitrate packetsLost:(int32_t)packetsLost;
- (void)onAudioStatusWithAudioLevel:(double)audioLevel totalAudioEnergy:(double)totalAudioEnergy totalSamplesDuration:(double)totalSamplesDuration;
- (void)onAudiobBitrate:(NSString * _Nonnull)userId bitrate:(int32_t)bitrate networkQualityState:(enum RKNetworkQualityState)networkQualityState;
- (void)onVideoRecordStatusWithWidth:(int32_t)width height:(int32_t)height fps:(int32_t)fps;
- (void)onVideoPublishStatusWithRid:(NSString * _Nullable)rid width:(int32_t)width height:(int32_t)height fps:(int32_t)fps bitrate:(int32_t)bitrate qualityLimitationReason:(NSString * _Nullable)qualityLimitationReason networkQualityState:(enum RKNetworkQualityState)networkQualityState;
- (void)onVideoStreamUnstableWithUserId:(NSString * _Nonnull)userId lossRate:(float)lossRate;
@end


SWIFT_PROTOCOL("_TtP5RKRTC15RKAudioConsumer_")
@protocol RKAudioConsumer <NSObject>
/// 自定义采集数据
/// \param inputId 数据标识
///
/// \param sampleRateHz 采样率
///
/// \param channels 通道数
///
/// \param data 音频数据
///
/// \param playDelayMS 播放延时
///
/// \param recDelayMS 采集延时
///
/// \param clockDrift 时钟漂移
///
- (void)consumeByteBufferFrameWithInputId:(NSString * _Nonnull)inputId sampleRateHz:(int32_t)sampleRateHz channels:(int32_t)channels data:(int8_t)data playDelayMS:(int32_t)playDelayMS recDelayMS:(int32_t)recDelayMS clockDrift:(int32_t)clockDrift;
/// 开启自定义音频流
- (void)startCustomAudio;
- (void)customAudio;
/// 结束自定义音频流
- (void)endCustomAudio;
@end

/// 当前音频输出设备
typedef SWIFT_ENUM(int32_t, RKAudioDevice, open) {
  RKAudioDeviceSpeakerPhone = 1,
  RKAudioDeviceEarpiece = 2,
  RKAudioDeviceWiredHeadset = 3,
  RKAudioDeviceBluetooth = 4,
};


SWIFT_CLASS("_TtC5RKRTC12RKAudioFrame")
@interface RKAudioFrame : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP5RKRTC13RKAudioSource_")
@protocol RKAudioSource <NSObject>
/// 初始化自定义音频采集模块
- (void)onCreateWithConsumer:(id <RKAudioConsumer> _Nonnull)consumer;
/// 开始采集音频数据
- (void)onStart;
/// 结束采集数据
- (void)onStop;
@end

@class RKChannelActionMsg;

SWIFT_PROTOCOL("_TtP5RKRTC18RKCallEventHandler_")
@protocol RKCallEventHandler <NSObject>
/// 收到呼叫
/// \param userId 用户UserId 
///
/// \param audio true 上传,false: 未上传
///
- (void)onReceiveCallWithChannelId:(NSString * _Nonnull)channelId channelActionMsg:(RKChannelActionMsg * _Nonnull)channelActionMsg;
/// 用户取消邀请
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId 用户频道Id
///   </li>
///   <li>
///     userId 用户UserId
///   </li>
///   <li>
///     inviteUserId 邀请人UserId
///   </li>
/// </ul>
- (void)onCallCanceledWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
@end

@class RKVideoFrame;

SWIFT_PROTOCOL("_TtP5RKRTC20RKCaptureInterceptor_")
@protocol RKCaptureInterceptor <NSObject>
- (void)onIntercept:(RKVideoFrame * _Nonnull)buffer;
@end

enum RKChannelOperationType : int32_t;
@class RKMediaDeviceInfo;

SWIFT_CLASS("_TtC5RKRTC18RKChannelActionMsg")
@interface RKChannelActionMsg : NSObject
@property (nonatomic) enum RKChannelOperationType operateType;
@property (nonatomic, copy) NSString * _Nullable activeOperateUser;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable passiveOperateUserList;
@property (nonatomic, strong) RKMediaDeviceInfo * _Nullable mediaDeviceInfo;
@property (nonatomic, copy) NSString * _Nullable password;
@property (nonatomic, copy) NSString * _Nullable channelName;
@property (nonatomic, copy) NSString * _Nullable channelSubject;
@property (nonatomic, copy) NSString * _Nullable extraParams;
@property (nonatomic, copy) NSString * _Nullable remark;
@property (nonatomic, copy) NSString * _Nullable refuseState;
@property (nonatomic, copy) NSString * _Nullable inviteUserId;
@property (nonatomic, copy) NSString * _Nullable maxResolution;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKChannelUserInfo;
@class RKRecordingStateModel;

SWIFT_PROTOCOL("_TtP5RKRTC21RKChannelEventHandler_")
@protocol RKChannelEventHandler <NSObject>
/// 用户加入频道
/// \param user @RKChannelUserInfo 
///
- (void)onUserJoinedWithUser:(RKChannelUserInfo * _Nonnull)user inviteUserId:(NSString * _Nullable)inviteUserId;
/// 用户离开频道
/// \param userId 用户UserId 
///
- (void)onUserLeftWithUserId:(NSString * _Nonnull)userId;
/// 用户拒绝邀请
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId 用户UserId
///   </li>
///   <li>
///     inviteUserId 邀请人UserId
///   </li>
/// </ul>
- (void)onUserRefusedWithUserId:(NSString * _Nonnull)userId inviteUserId:(NSString * _Nonnull)inviteUserId;
/// 用户正忙
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId 用户UserId
///   </li>
///   <li>
///     inviteUserId 邀请人UserId
///   </li>
/// </ul>
- (void)onUserBusyWithUserId:(NSString * _Nonnull)userId inviteUserId:(NSString * _Nonnull)inviteUserId;
/// 用户被踢出频道
/// \param userIds 被踢出的用户列表 
///
- (void)onUserKickedWithUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// 被踢出频道
/// \param userId 用户Id 
///
- (void)onKickedByUserId:(NSString * _Nonnull)byUserId;
/// 频道关闭
/// \param userId 用户Id 
///
- (void)onStopByUserId:(NSString * _Nonnull)byUserId;
/// 频道消息
/// \param message 消息体 
///
- (void)onChannelMessageReceived:(NSString * _Nonnull)message fromUserId:(NSString * _Nonnull)fromUserId;
/// 外部自定义消息
/// \param message 消息体 
///
- (void)onChannelThirdMessageReceived:(NSString * _Nonnull)message fromUserId:(NSString * _Nonnull)fromUserId;
/// 有人重新进入了会议
/// \param userId 入会userId 
///
- (void)rejoinChannel:(NSString * _Nonnull)userId;
/// 远端用户音频上传状态变更
/// \param userId 用户UserId 
///
/// \param audio true 上传,false: 未上传
///
- (void)onRemoteUserAudioChangedWithUserId:(NSString * _Nonnull)userId audio:(BOOL)audio;
/// 远端用户视频上传状态变更
/// \param userId 用户UserId 
///
/// \param video true 上传,false: 未上传
///
- (void)onRemoteUserVideoChangedWithUserId:(NSString * _Nonnull)userId video:(BOOL)video;
@optional
/// 用户开启了屏幕共享
/// \param userId 用户UserId 
///
- (void)onUserStartScreenShareWithUserId:(NSString * _Nonnull)userId;
/// 用户关闭了屏幕共享
/// \param userId 用户UserId 
///
- (void)onUserStopScreenShareWithUserId:(NSString * _Nonnull)userId;
/// 屏幕录制开关通知
/// \param isOpen 是否打开 
///
- (void)onRecordingSwitch:(BOOL)isOpen;
/// 屏幕录制状态通知
/// \param recordingStateData  @RKRecordingStateModel 
///
- (void)onRecordingStateChanged:(RKRecordingStateModel * _Nonnull)recordingStateData;
/// 自定义属性发生了变更
/// \param userId userId 修改自定义属性的用户UserId 
///
/// \param userId extra 修改后自定义属性内容 
///
- (void)onChannelExtraParamsChangedWithUserId:(NSString * _Nullable)userId extra:(NSString * _Nullable)extra;
/// 视频第一帧
/// \param userId 用户 id 
///
- (void)onUserFirstFrameRendered:(NSString * _Nonnull)userId;
/// 用户大小流视频上传最大分辨率发生改变
/// \param userId 用户 id 
///
- (void)onUserPublishVidepSizeChanged:(NSString * _Nonnull)userId width:(int32_t)width height:(int32_t)height;
/// video 参数回调
- (void)onVideoPublishStatus:(NSString * _Nonnull)userId rid:(NSString * _Nullable)rid width:(int32_t)width height:(int32_t)height fps:(int32_t)fps bitrate:(int32_t)bitrate qualityLimitationReason:(NSString * _Nullable)qualityLimitationReason;
/// 频道出现异常，将释放本地频道，通知上层
/// \param errorCode 错误码 
///
- (void)onError:(NSInteger)errorCode;
@end


SWIFT_CLASS("_TtC5RKRTC13RKChannelInfo")
@interface RKChannelInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull maxResolution;
@property (nonatomic, copy) NSString * _Nonnull channelOwner;
@property (nonatomic, copy) NSString * _Nonnull recordingSwitch;
@property (nonatomic, copy) NSString * _Nonnull remark;
@property (nonatomic, copy) NSString * _Nullable channelName;
@property (nonatomic, copy) NSString * _Nullable channelSubject;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 消息通知
typedef SWIFT_ENUM(int32_t, RKChannelOperationType, open) {
/// 未知状态
  RKChannelOperationTypeNONE = 0,
/// 创建会议
  RKChannelOperationTypeCREATE = 1,
/// 邀请人员进入会议
  RKChannelOperationTypeINVITE = 2,
/// 加入会议
  RKChannelOperationTypeJOIN = 3,
/// 离开会议
  RKChannelOperationTypeLEAVE = 4,
/// 踢出会议内成员
  RKChannelOperationTypeKICK = 5,
/// 拒接会议
  RKChannelOperationTypeREFUSE = 6,
/// 取消邀请
  RKChannelOperationTypeCALL_CANCEL = 7,
/// 结束会议
  RKChannelOperationTypeEND = 8,
  RKChannelOperationTypeREJOIN = 9,
};


SWIFT_CLASS("_TtC5RKRTC17RKChannelUserInfo")
@interface RKChannelUserInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, strong) RKMediaDeviceInfo * _Nullable mediaDeviceInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5RKRTC21RKChannelUserInfoList")
@interface RKChannelUserInfoList : NSObject
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, strong) RKMediaDeviceInfo * _Nullable mediaDeviceInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5RKRTC12RKI420Buffer")
@interface RKI420Buffer : NSObject
@property (nonatomic) int32_t chromaWidth;
@property (nonatomic) int32_t chromaHeight;
@property (nonatomic) uint8_t const * _Nullable dataY;
@property (nonatomic) uint8_t const * _Nullable dataU;
@property (nonatomic) uint8_t const * _Nullable dataV;
@property (nonatomic) int32_t strideY;
@property (nonatomic) int32_t strideU;
@property (nonatomic) int32_t strideV;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 频道共享类型 0无共享，1屏幕共享，2电子白板，3AR标注，4视频点选
typedef SWIFT_ENUM(NSInteger, RKIShareType, open) {
  RKIShareTypeNone = 0,
  RKIShareTypeScreenShare = 1,
  RKIShareTypeDoodle = 2,
  RKIShareTypeSlam = 3,
  RKIShareTypeVideoPoint = 4,
};

@class RTCIceCandidate;

SWIFT_CLASS("_TtC5RKRTC14RKIceCandidate")
@interface RKIceCandidate : NSObject
@property (nonatomic, copy) NSString * _Nonnull candidate;
@property (nonatomic) int32_t sdpMLineIndex;
@property (nonatomic, copy) NSString * _Nonnull sdpMid;
@property (nonatomic, copy) NSString * _Nonnull passiveSubscribeUserId;
@property (nonatomic, readonly, strong) RTCIceCandidate * _Nonnull rtcIceCandidate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5RKRTC15RKJoinedChannel")
@interface RKJoinedChannel : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, copy) NSString * _Nullable channelName;
@property (nonatomic, copy) NSString * _Nullable channelSubject;
@property (nonatomic, copy) NSString * _Nullable maxResolution;
@property (nonatomic, copy) NSString * _Nullable extraParams;
@property (nonatomic, copy) NSString * _Nullable remark;
@property (nonatomic, copy) NSArray<RKChannelUserInfo *> * _Nullable membersList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS("_TtC5RKRTC13RKMediaDevice")
@interface RKMediaDevice : NSObject
@property (nonatomic) enum AVCaptureDevicePosition position;
@property (nonatomic, readonly) BOOL isLightOn;
@property (nonatomic, readonly, strong) RKMediaDeviceInfo * _Nonnull mediaDeviceInfo;
- (void)startCapture;
- (void)stopCapture:(void (^ _Nonnull)(void))c;
- (void)switchCamera;
- (void)lightTurn:(BOOL)turnOn onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RTCAudioSession;
@class RTCAudioFrame;

@interface RKMediaDevice (SWIFT_EXTENSION(RKRTC)) <RTCAudioSessionDelegate>
- (RTCAudioFrame * _Nonnull)audioSession:(RTCAudioSession * _Nonnull)audioSession didCaptureAudioFrame:(RTCAudioFrame * _Nonnull)audioFrame SWIFT_WARN_UNUSED_RESULT;
@end


@class RTCVideoFrame;

@interface RKMediaDevice (SWIFT_EXTENSION(RKRTC)) <RTCVideoRenderer>
- (void)renderFrame:(RTCVideoFrame * _Nullable)frame;
- (void)setSize:(CGSize)size;
@end

enum RKVideoFormat : int32_t;
enum RKVideoRotation : int32_t;

SWIFT_PROTOCOL("_TtP5RKRTC20RKVideoFrameConsumer_")
@protocol RKVideoFrameConsumer <NSObject>
/// 自定义采集数据
/// \param buffer 视频数据
///
/// \param format 视频格式 @RKVideoFormat
///
/// \param width 视频宽
///
/// \param height 视频高
///
/// \param rotation 旋转角度 @RKVideoRotation
///
/// \param timestamp 时间
///
- (void)consumeByteBufferFrameWithBuffer:(CVPixelBufferRef _Nonnull)buffer format:(enum RKVideoFormat)format width:(int32_t)width height:(int32_t)height rotation:(enum RKVideoRotation)rotation timestamp:(int64_t)timestamp;
/// 自定义采集数据
/// \param data 视频数据
///
/// \param format 视频格式 @RKVideoFormat
///
/// \param width 视频宽
///
/// \param height 视频高
///
/// \param rotation 旋转角度 @RKVideoRotation
///
/// \param timestamp 时间
///
- (void)consumeByteArrayFrameWithData:(NSArray<NSNumber *> * _Nonnull)data format:(enum RKVideoFormat)format width:(int32_t)width height:(int32_t)height rotation:(enum RKVideoRotation)rotation timestamp:(int64_t)timestamp;
@end


@interface RKMediaDevice (SWIFT_EXTENSION(RKRTC)) <RKVideoFrameConsumer>
- (void)consumeByteBufferFrameWithBuffer:(CVPixelBufferRef _Nonnull)buffer format:(enum RKVideoFormat)format width:(int32_t)width height:(int32_t)height rotation:(enum RKVideoRotation)rotation timestamp:(int64_t)timestamp;
- (void)consumeByteArrayFrameWithData:(NSArray<NSNumber *> * _Nonnull)data format:(enum RKVideoFormat)format width:(int32_t)width height:(int32_t)height rotation:(enum RKVideoRotation)rotation timestamp:(int64_t)timestamp;
@end


@interface RKMediaDevice (SWIFT_EXTENSION(RKRTC)) <RKAudioConsumer>
- (void)startCustomAudio;
- (void)customAudio;
- (void)endCustomAudio;
- (void)consumeByteBufferFrameWithInputId:(NSString * _Nonnull)inputId sampleRateHz:(int32_t)sampleRateHz channels:(int32_t)channels data:(int8_t)data playDelayMS:(int32_t)playDelayMS recDelayMS:(int32_t)recDelayMS clockDrift:(int32_t)clockDrift;
@end



SWIFT_CLASS("_TtC5RKRTC17RKMediaDeviceInfo")
@interface RKMediaDeviceInfo : NSObject
@property (nonatomic) BOOL audio;
@property (nonatomic) BOOL video;
@property (nonatomic) int32_t netQuality;
@property (nonatomic) int32_t volumeEnergy;
@property (nonatomic) int32_t videoWidth;
@property (nonatomic) int32_t videoHeight;
@property (nonatomic) BOOL screenShare;
@property (nonatomic) NSInteger portraitDegree;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, RKNetworkQualityState, open) {
  RKNetworkQualityStateUNKNOWN = 0,
  RKNetworkQualityStateEXCELLENT = 1,
  RKNetworkQualityStateGOOD = 2,
  RKNetworkQualityStateBAD = 3,
};


SWIFT_CLASS("_TtC5RKRTC15RKRTCAPIManager")
@interface RKRTCAPIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RKStreamType : int32_t;
enum SubsribeType : NSInteger;

SWIFT_PROTOCOL("_TtP5RKRTC16RKRTCAPIProtocol_")
@protocol RKRTCAPIProtocol <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKRTCAPIManager * _Null_unspecified shared;)
+ (RKRTCAPIManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// token检验
/// \param sdkId Rtc的固定sdkId
///
/// \param userId 用户id
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)generatorTokenWithSdkId:(NSString * _Nonnull)sdkId userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 刷新token
- (void)refreshToken:(NSString * _Nonnull)refreshToken onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 创建频道
/// \param userIdList 邀请的成员ID列表
///
/// \param password 频道密码，为空表示没有密码
///
/// \param thirdChannelId 三方自定义频道id，非必填
///
/// \param channelName 频道名称
///
/// \param channelSubject 频道主题
///
/// \param extraParams 拓展参数
///
/// \param remark 三方业务透传字段
///
/// \param maxMembers 频道最大成员数
///
/// \param maxResolution 最大分辨率
///
/// \param bitrate 码率， 默认200kbps
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelCreateWithUserIdList:(NSArray<NSString *> * _Nullable)userIdList password:(NSString * _Nullable)password thirdChannelId:(NSString * _Nullable)thirdChannelId channelName:(NSString * _Nullable)channelName channelSubject:(NSString * _Nullable)channelSubject extraParams:(NSString * _Nullable)extraParams remark:(NSString * _Nullable)remark maxMembers:(int32_t)maxMembers maxResolution:(NSString * _Nonnull)maxResolution bitrate:(int32_t)bitrate onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 加入频道
/// \param channelId 频道ID
///
/// \param password 频道密码
///
/// \param sdpOffer sdpOffer
///
/// \param mediaDeviceInfo @RKMediaDeviceInfo
///
/// \param bitrate 码率， 默认200kbps
///
/// \param maxDelay 最大延迟， 默认500ms
///
/// \param inviteUserId 邀请人
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelJoinWithChannelId:(NSString * _Nonnull)channelId password:(NSString * _Nullable)password sdpOffer:(NSString * _Nonnull)sdpOffer mediaDeviceInfo:(NSString * _Nonnull)mediaDeviceInfo bitrate:(int32_t)bitrate maxDelay:(int32_t)maxDelay inviteUserId:(NSString * _Nullable)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 邀请成员
/// \param channelId 频道ID
///
/// \param userIdList 成员ID列表
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelInviteWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 取消邀请成员
/// \param channelId 频道ID
///
/// \param cancelUserIdList 需要取消的成员ID列表
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelCancelInviteWithChannelId:(NSString * _Nonnull)channelId cancelUserIdList:(NSArray<NSString *> * _Nonnull)cancelUserIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 离开频道
/// \param channelId 频道ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelLeaveWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 关闭频道
/// \param channelId 频道ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelEndWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 踢出频道成员
/// \param channelId 频道ID
///
/// \param userIdList 成员ID列表
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelKickWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 拒接
/// \param channelId 频道ID
///
/// \param inviteUserId 邀请人ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelRefuseWithChannelId:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 正忙
/// \param channelId 频道ID
///
/// \param inviteUserId 邀请人ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelBusyWithChannelId:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设置频道参数
/// \param channelId 频道ID
///
/// \param extraParams 参数json字符串
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelSetExtraParamsWithChannelId:(NSString * _Nonnull)channelId extraParams:(NSString * _Nonnull)extraParams onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取频道参数
/// \param channelId 频道ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelGetExtraParamsWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅频道
/// \param channelId 频道ID
///
/// \param userId 用户id
///
/// \param stram 流类型 默认小流
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelSubscribeWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId stram:(enum RKStreamType)stram mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
///  修改音视频订阅
/// \param channelId 频道ID
///
/// \param userId 用户id
///
/// \param mediaType 将要切换的音视频类型
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)switchSubscribeWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 取消订阅
/// \param channelId 频道ID
///
/// \param userIdList 成员ID列表
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelUnsubscribeWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 大小流切换
/// \param channelId 频道ID
///
/// \param userId 成员ID列表
///
/// \param isHighStream 是否大流 默认小流
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelSwitchStreamWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId isHighStream:(BOOL)isHighStream onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 更新流媒体信息
/// \param channelId 频道ID
///
/// \param mediaDeviceInfo @RKMediaDeviceInfo
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelUpdateMediaDeviceInfoWithChannelId:(NSString * _Nonnull)channelId mediaDeviceInfo:(NSString * _Nonnull)mediaDeviceInfo onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取当前频道内成员
/// \param channelId 频道ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelGetSpaceUserListWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户正在进行的频道列表
- (void)getChannelListOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 断线重连
- (void)channelReconnectionWithChannelId:(NSString * _Nonnull)channelId sdpOffer:(NSString * _Nullable)sdpOffer subscribeUserIdList:(NSArray<NSString *> * _Nonnull)subscribeUserIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 发送频道消息
/// \param channelId 频道Id
///
/// \param userIdList 为空则发给会议内所有人（包括自己）
///
/// \param sendMessageStr 消息内容
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)sendChannelForwardMessageWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nullable)userIdList sendMessageStr:(NSString * _Nonnull)sendMessageStr onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 发起屏幕共享
- (void)startScreenShareWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed SWIFT_DEPRECATED_MSG("1.3.0 弃用");
/// 结束屏幕共享
- (void)stopScreenShareWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed SWIFT_DEPRECATED_MSG("1.3.0 弃用");
/// 获取当前正在开启的屏幕共享
- (void)getScreenShareWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 频道共享状态上报
/// <ul>
///   <li>
///     channelId: 频道Id
///   </li>
///   <li>
///     shareInfo: 频道共享信息
///   </li>
///   <li>
///     shareType: 共享类型
///   </li>
///   <li>
///     onSuccess: 成功回调
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)reportShareInfoWithChannelId:(NSString * _Nonnull)channelId promoterUserId:(NSString * _Nonnull)promoterUserId shareInfo:(NSString * _Nonnull)shareInfo shareType:(enum RKIShareType)shareType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询频道共享状态
/// <ul>
///   <li>
///     channelId: 频道Id
///   </li>
///   <li>
///     onSuccess: 成功回调
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)queryReportShareInfoWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询频道信息
/// <ul>
///   <li>
///     channelId: 频道Id
///   </li>
///   <li>
///     onSuccess: 成功回调 @RKChannelInfo
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)queryChannelInfoWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 添加涂鸦信息
/// <ul>
///   <li>
///     channelId: 频道Id
///   </li>
///   <li>
///     graffitiJsonList: 涂鸦信息
///   </li>
///   <li>
///     onSuccess: 成功回调
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)addChannelGraffitiWithChannelId:(NSString * _Nonnull)channelId promoterUserId:(NSString * _Nullable)promoterUserId graffitiJsonList:(NSArray<NSString *> * _Nonnull)graffitiJsonList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询涂鸦信息
/// <ul>
///   <li>
///     channelId: 频道Id
///   </li>
///   <li>
///     onSuccess: 成功回调
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)queryChannelGraffitiWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 清空涂鸦信息
/// <ul>
///   <li>
///     channelId: 频道Id
///   </li>
///   <li>
///     onSuccess: 成功回调
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)clearMeetingGraffitiWithChannelId:(NSString * _Nonnull)channelId promoterUserId:(NSString * _Nullable)promoterUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 用户流配置修改
/// \param channelId 频道Id
///
/// \param bitrate 码率， 默认2000 kbps
///
/// \param minDelay 最小延迟 默认10 ms
///
/// \param maxDelay 最大延迟 默认500 ms
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelModifyStreamConfigureWithChannelId:(NSString * _Nonnull)channelId bitrate:(int32_t)bitrate minDelay:(int32_t)minDelay maxDelay:(int32_t)maxDelay onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 批量交换ice
/// \param channelId 频道Id
///
/// \param passiveSubscribeUserId 用户Id
///
/// \param iceCandidateList iceCandidateList
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)channelIceCandidateWithChannelId:(NSString * _Nonnull)channelId passiveSubscribeUserId:(NSString * _Nonnull)passiveSubscribeUserId iceCandidateList:(NSArray<RKIceCandidate *> * _Nonnull)iceCandidateList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 开启视频录制
/// \param channelId 频道ID
///
/// \param resolution 录制分辨率
///
/// \param subStream 选择录制大小流 , 默认 low
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)recordingStartWithChannelId:(NSString * _Nonnull)channelId resolution:(NSString * _Nonnull)resolution subStream:(enum RKStreamType)subStream bucket:(NSString * _Nonnull)bucket fileName:(NSString * _Nonnull)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 结束视频录制
/// \param channelId 频道ID
///
/// \param save save 是否保存视频， 默认保存视频
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)recordingEndWithChannelId:(NSString * _Nonnull)channelId save:(BOOL)save onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取会议内录制的视频列表
/// \param channelId 频道ID
///
/// \param onSuccess 成功回调 [RKRecordingFile]
///
/// \param onFailed 失败回调
///
- (void)getRecordingListWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end


@interface RKRTCAPIManager (SWIFT_EXTENSION(RKRTC)) <RKRTCAPIProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKRTCAPIManager * _Nonnull shared;)
+ (RKRTCAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 用户token
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull token;)
+ (NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
+ (void)setToken:(NSString * _Nonnull)value;
/// 获取配置
- (void)getInitConfigOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取token
- (void)generatorTokenWithSdkId:(NSString * _Nonnull)sdkId userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 刷新token
- (void)refreshToken:(NSString * _Nonnull)refreshToken onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 创建频道
- (void)channelCreateWithUserIdList:(NSArray<NSString *> * _Nullable)userIdList password:(NSString * _Nullable)password thirdChannelId:(NSString * _Nullable)thirdChannelId channelName:(NSString * _Nullable)channelName channelSubject:(NSString * _Nullable)channelSubject extraParams:(NSString * _Nullable)extraParams remark:(NSString * _Nullable)remark maxMembers:(int32_t)maxMembers maxResolution:(NSString * _Nonnull)maxResolution bitrate:(int32_t)bitrate onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 加入频道
- (void)channelJoinWithChannelId:(NSString * _Nonnull)channelId password:(NSString * _Nullable)password sdpOffer:(NSString * _Nonnull)sdpOffer mediaDeviceInfo:(NSString * _Nonnull)mediaDeviceInfo bitrate:(int32_t)bitrate maxDelay:(int32_t)maxDelay inviteUserId:(NSString * _Nullable)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 邀请成员
- (void)channelInviteWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 取消邀请
- (void)channelCancelInviteWithChannelId:(NSString * _Nonnull)channelId cancelUserIdList:(NSArray<NSString *> * _Nonnull)cancelUserIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 离开频道
- (void)channelLeaveWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 关闭频道
- (void)channelEndWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 踢出频道成员
- (void)channelKickWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 拒接
- (void)channelRefuseWithChannelId:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 正忙
- (void)channelBusyWithChannelId:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设置频道参数
- (void)channelSetExtraParamsWithChannelId:(NSString * _Nonnull)channelId extraParams:(NSString * _Nonnull)extraParams onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取频道参数
- (void)channelGetExtraParamsWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅频道
- (void)channelSubscribeWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId stram:(enum RKStreamType)stram mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 交换answer
- (void)channelSubscribeAnswerWithChannelId:(NSString * _Nonnull)channelId sdpAnswer:(NSString * _Nonnull)sdpAnswer userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)switchSubscribeWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 取消订阅
- (void)channelUnsubscribeWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 大小流切换
- (void)channelSwitchStreamWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId isHighStream:(BOOL)isHighStream onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 更新流媒体信息
- (void)channelUpdateMediaDeviceInfoWithChannelId:(NSString * _Nonnull)channelId mediaDeviceInfo:(NSString * _Nonnull)mediaDeviceInfo onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取当前频道内成员
- (void)channelGetSpaceUserListWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户正在进行的频道列表
- (void)getChannelListOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)channelReconnectionWithChannelId:(NSString * _Nonnull)channelId sdpOffer:(NSString * _Nullable)sdpOffer subscribeUserIdList:(NSArray<NSString *> * _Nonnull)subscribeUserIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)sendChannelForwardMessageWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nullable)userIdList sendMessageStr:(NSString * _Nonnull)sendMessageStr onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)startScreenShareWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)stopScreenShareWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)getScreenShareWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)reportShareInfoWithChannelId:(NSString * _Nonnull)channelId promoterUserId:(NSString * _Nonnull)promoterUserId shareInfo:(NSString * _Nonnull)shareInfo shareType:(enum RKIShareType)shareType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryReportShareInfoWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryChannelInfoWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)addChannelGraffitiWithChannelId:(NSString * _Nonnull)channelId promoterUserId:(NSString * _Nullable)promoterUserId graffitiJsonList:(NSArray<NSString *> * _Nonnull)graffitiJsonList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryChannelGraffitiWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)clearMeetingGraffitiWithChannelId:(NSString * _Nonnull)channelId promoterUserId:(NSString * _Nullable)promoterUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 用户流配置修改
- (void)channelModifyStreamConfigureWithChannelId:(NSString * _Nonnull)channelId bitrate:(int32_t)bitrate minDelay:(int32_t)minDelay maxDelay:(int32_t)maxDelay onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 批量交换ice
- (void)channelIceCandidateWithChannelId:(NSString * _Nonnull)channelId passiveSubscribeUserId:(NSString * _Nonnull)passiveSubscribeUserId iceCandidateList:(NSArray<RKIceCandidate *> * _Nonnull)iceCandidateList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 开启视频录制
- (void)recordingStartWithChannelId:(NSString * _Nonnull)channelId resolution:(NSString * _Nonnull)resolution subStream:(enum RKStreamType)subStream bucket:(NSString * _Nonnull)bucket fileName:(NSString * _Nonnull)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 结束视频录制
- (void)recordingEndWithChannelId:(NSString * _Nonnull)channelId save:(BOOL)save onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取频道内录制的视频列表
- (void)getRecordingListWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end


@class UIView;

SWIFT_CLASS("_TtC5RKRTC12RKRTCChannel")
@interface RKRTCChannel : NSObject
/// 频道ID
@property (nonatomic, copy) NSString * _Nonnull channelId;
/// 频道title
@property (nonatomic, copy) NSString * _Nonnull channelTitle;
/// 成员列表
@property (nonatomic, copy) NSArray<RKChannelUserInfo *> * _Nonnull channelUserList;
/// 成员视频
@property (nonatomic, copy) NSDictionary<NSString *, UIView *> * _Nonnull videoViews;
@property (nonatomic) BOOL autoSubscribe;
@property (nonatomic) BOOL enableSimulcast;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface RKRTCChannel (SWIFT_EXTENSION(RKRTC)) <RTCVideoViewDelegate>
- (void)videoView:(id <RTCVideoRenderer> _Nonnull)videoView didChangeVideoSize:(CGSize)size;
@end




@interface RKRTCChannel (SWIFT_EXTENSION(RKRTC))
- (void)stopWithChannelId:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end

enum RKScaleType : int32_t;

SWIFT_PROTOCOL("_TtP5RKRTC21RKRTCChannelInterface_")
@protocol RKRTCChannelInterface <NSObject>
/// 频道ID
@property (nonatomic, readonly, copy) NSString * _Nonnull channelId;
/// 频道title
@property (nonatomic, readonly, copy) NSString * _Nonnull channelTitle;
/// 频道成员
@property (nonatomic, readonly, copy) NSArray<RKChannelUserInfo *> * _Nonnull channelUserList;
/// 是否自动订阅频道中的成员，默认不自动订阅
@property (nonatomic) BOOL autoSubscribe;
/// 加入频道
- (void)joinWithChannelId:(NSString * _Nonnull)channelId audio:(BOOL)audio video:(BOOL)video password:(NSString * _Nullable)password bitrate:(int32_t)bitrate maxDelay:(int32_t)maxDelay inviteUserId:(NSString * _Nullable)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 离开房间
- (void)leave:(NSString * _Nullable)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 邀请用户加入频道
/// <ul>
///   <li>
///     onSuccess:  data 返回重复邀请的用户ID
///   </li>
/// </ul>
- (void)inviteWithUserIds:(NSArray<NSString *> * _Nonnull)userIds onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 把用户提出频道
- (void)kickWithUserIds:(NSArray<NSString *> * _Nonnull)userIds onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅视频流
- (void)subscribeWithUserId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅视频流带媒体选择
- (void)subscribeWithUserId:(NSString * _Nonnull)userId mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅媒体类型切换
- (void)swicthSubscribeTypeWithUserId:(NSString * _Nonnull)userId mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 取消订阅视频流
- (void)unSubscribeWithUserList:(NSArray<NSString *> * _Nonnull)userList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 用户大小流切换
- (void)switchStreamWithUserId:(NSString * _Nonnull)userId isHighStream:(BOOL)isHighStream onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取本地视频View
- (UIView * _Nullable)getLocalVideoView:(enum RKScaleType)scaleType SWIFT_WARN_UNUSED_RESULT;
/// 获取远端用户视频View
- (void)getRemoteVideoViewWithUserId:(NSString * _Nonnull)userId scaleType:(enum RKScaleType)scaleType compeletBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(UIView * _Nullable))compeletBlock;
/// 截图保存
- (void)takeSnapshotWithUserId:(NSString * _Nonnull)userId filePath:(NSString * _Nonnull)filePath renderView:(UIView * _Nullable)renderView onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 是否上传本地音频
- (void)publishLocalAudioStream:(BOOL)publish;
/// 是否上传本地视频
- (void)publishLocalVideoStream:(BOOL)publish;
/// 监听频道事件
- (void)setChannelEventHandler:(id <RKChannelEventHandler> _Nullable)channelEventHandler;
/// 音视频质量数据回调
- (void)setQualityHandler:(id <RKAVQualityListener> _Nullable)qualityListener;
/// 设置拓展参数
- (void)setExtraParams:(NSString * _Nonnull)extras onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取拓展参数
- (void)getExtraParamsOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 发送频道消息给指定用户，userIdList 传空发给频道内所有用户，包括自己
- (void)sendChannelMsgWithMsg:(NSString * _Nonnull)msg userIdList:(NSArray<NSString *> * _Nullable)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 开启屏幕共享
- (void)startScreenShareWithWidth:(int32_t)width height:(int32_t)height fps:(int32_t)fps onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 结束屏幕共享
- (void)stopScreenShareOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取当前频道用户列表
- (NSArray<RKChannelUserInfo *> * _Nonnull)getChannelUserList SWIFT_WARN_UNUSED_RESULT;
/// 查询房间成员并订阅
- (void)getSpaceUserListOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 配置视频质量（最大延迟、最大码率 kbps）
- (void)configVideoQualityWithMaxPublishBitrate:(int32_t)maxPublishBitrate maxDelay:(int32_t)maxDelay;
@end


@interface RKRTCChannel (SWIFT_EXTENSION(RKRTC)) <RKRTCChannelInterface>
- (void)joinWithChannelId:(NSString * _Nonnull)channelId audio:(BOOL)audio video:(BOOL)video password:(NSString * _Nullable)password bitrate:(int32_t)bitrate maxDelay:(int32_t)maxDelay inviteUserId:(NSString * _Nullable)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 加入频道
- (void)realJoinWithChannelId:(NSString * _Nonnull)channelId audio:(BOOL)audio video:(BOOL)video password:(NSString * _Nullable)password bitrate:(int32_t)bitrate maxDelay:(int32_t)maxDelay inviteUserId:(NSString * _Nullable)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 离开房间
- (void)leave:(NSString * _Nullable)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 邀请用户加入频道
- (void)inviteWithUserIds:(NSArray<NSString *> * _Nonnull)userIds onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 把用户踢出频道
- (void)kickWithUserIds:(NSArray<NSString *> * _Nonnull)userIds onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅视频流
- (void)subscribeWithUserId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅视频流带媒体选择
- (void)subscribeWithUserId:(NSString * _Nonnull)userId mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 订阅媒体类型切换
- (void)swicthSubscribeTypeWithUserId:(NSString * _Nonnull)userId mediaType:(enum SubsribeType)mediaType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 取消订阅视频流
- (void)unSubscribeWithUserList:(NSArray<NSString *> * _Nonnull)userList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 用户大小流切换
- (void)switchStreamWithUserId:(NSString * _Nonnull)userId isHighStream:(BOOL)isHighStream onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取本地视频View
- (UIView * _Nullable)getLocalVideoView:(enum RKScaleType)scaleType SWIFT_WARN_UNUSED_RESULT;
/// 获取远端用户视频View
- (void)getRemoteVideoViewWithUserId:(NSString * _Nonnull)userId scaleType:(enum RKScaleType)scaleType compeletBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(UIView * _Nullable))compeletBlock;
- (void)takeSnapshotWithUserId:(NSString * _Nonnull)userId filePath:(NSString * _Nonnull)filePath renderView:(UIView * _Nullable)renderView onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 是否上传本地音频
- (void)publishLocalAudioStream:(BOOL)publish;
/// 是否上传本地视频
- (void)publishLocalVideoStream:(BOOL)publish;
/// 监听频道事件
- (void)setChannelEventHandler:(id <RKChannelEventHandler> _Nullable)channelEventHandler;
- (void)setQualityHandler:(id <RKAVQualityListener> _Nullable)qualityListener;
/// 设置拓展参数
- (void)setExtraParams:(NSString * _Nonnull)extras onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取拓展参数
- (void)getExtraParamsOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 指定用户发送频道消息
- (void)sendChannelMsgWithMsg:(NSString * _Nonnull)msg userIdList:(NSArray<NSString *> * _Nullable)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 开启屏幕共享
- (void)startScreenShareWithWidth:(int32_t)width height:(int32_t)height fps:(int32_t)fps onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 结束屏幕共享
- (void)stopScreenShareOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取当前频道用户列表
- (NSArray<RKChannelUserInfo *> * _Nonnull)getChannelUserList SWIFT_WARN_UNUSED_RESULT;
/// 查询房间成员并订阅
- (void)getSpaceUserListOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)configVideoQualityWithMaxPublishBitrate:(int32_t)maxPublishBitrate maxDelay:(int32_t)maxDelay;
- (void)publishDeviceDirectio;
@end


typedef SWIFT_ENUM(NSInteger, RKRTCCode, open) {
/// 正常
  RKRTCCodeOK = 0,
/// SDK未初始化
  RKRTCCodeSDK_NOT_INIT = 1,
/// 其他异常
  RKRTCCodeOTHER_ERROR = 199,
/// 请求参数为空
  RKRTCCodeREQUEST_PARAMS_NULL = 10001,
/// channelId为空
  RKRTCCodeCHANNEL_ID_NULL = 10002,
/// channelId错误
  RKRTCCodeCHANNEL_ID_ERROR = 10003,
/// 会议不存在
  RKRTCCodeCHANNEL_IS_NOT_EXIST = 10004,
/// 用户id为空
  RKRTCCodeUSERID_IS_NULL = 10005,
/// channelSpace创建失败
  RKRTCCodeCHANNEL_CREATE_ERROR = 10006,
/// channelSpace加入失败
  RKRTCCodeCHANNEL_JOIN_ERROR = 10007,
/// 离开频道操作枚举有误
  RKRTCCodeLEAVE_OPERATE_ERROR = 10008,
/// 用户已经在会议中
  RKRTCCodeUSER_EXIST_CHANNEL = 10009,
/// 用户已经被订阅，不可重复订阅
  RKRTCCodeUSER_IS_SUBSCRIBE = 10010,
/// 被订阅的用户不在会议中
  RKRTCCodeUSER_IS_NOT_CHANNEL_SPACE = 10011,
/// 频道密码错误
  RKRTCCodeCHANNEL_PASSWORD_IS_ERROR = 10012,
/// 切换流的用户不在频道内
  RKRTCCodeSUBSCRIBE_IS_NOT_EXIST = 10013,
/// 用户已不在频道内
  RKRTCCodeUSER_IS_NOT_EXIST_CHANNEL = 10014,
/// 频道id已存在
  RKRTCCodeCHANNEL_ID_IS_EXIST = 10015,
/// 频道成员已满
  RKRTCCodeCHANNEL_MEMBERS_IS_FULL = 10016,
/// 用户列表为空
  RKRTCCodeUSER_LIST_IS_EMPTY = 10017,
/// 当前APPID 会议人数达到上限
  RKRTCCodeUSER_ALREADY_FULL = 10028,
/// 发送消息体为空
  RKRTCCodeSEND_MESSAGE_IS_NULL = 10029,
/// token 为空
  RKRTCCodeTOKEN_IS_NULL = 20001,
/// token 非法
  RKRTCCodeTOKEN_IS_INVALID = 2002,
/// token 不是来自于服务端
  RKRTCCodeTOKEN_IS_NOT_FORM_SERVER = 20003,
/// appid 为null
  RKRTCCodeAPP_ID_IS_NULL = 20004,
/// token 被销毁 此code会自动刷新，其余均会自动刷新token
  RKRTCCodeTOKEN_IS_EXPIRE = 20005,
/// appi 不存在
  RKRTCCodeAPPID_IS_NOT_EXIST = 20006,
};


SWIFT_CLASS("_TtC5RKRTC18RKRTCConfigManager")
@interface RKRTCConfigManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) RKRTCConfigManager * _Nonnull shared;)
+ (RKRTCConfigManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(RKRTCConfigManager * _Nonnull)value;
@property (nonatomic, readonly, copy) NSString * _Nonnull pUserId;
- (void)resetUserAuthInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// RTCClient state
typedef SWIFT_ENUM(int32_t, RKRTCConnectionState, open) {
  RKRTCConnectionStateNew = 0,
  RKRTCConnectionStateChecking = 1,
  RKRTCConnectionStateConnected = 2,
  RKRTCConnectionStateCompleted = 3,
  RKRTCConnectionStateFailed = 4,
  RKRTCConnectionStateDisconnected = 5,
  RKRTCConnectionStateClosed = 6,
  RKRTCConnectionStateCount = 7,
};


SWIFT_CLASS("_TtC5RKRTC12RKRTCMessage")
@interface RKRTCMessage : NSObject
@property (nonatomic) id _Nullable messageData;
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic) int64_t timestamp;
@property (nonatomic, copy) NSString * _Nullable channelId;
@property (nonatomic, copy) NSString * _Nullable userId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5RKRTC15RKRecordingFile")
@interface RKRecordingFile : NSObject
@property (nonatomic, copy) NSString * _Nullable channelId;
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic) NSTimeInterval endTime;
@property (nonatomic, copy) NSString * _Nullable resolution;
@property (nonatomic, copy) NSString * _Nullable recordingState;
@property (nonatomic, copy) NSString * _Nullable message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 录制状态
typedef SWIFT_ENUM(int32_t, RKRecordingState, open) {
  RKRecordingStateRecording = 0,
  RKRecordingStateUploading = 1,
  RKRecordingStateDone = 2,
  RKRecordingStateError = 3,
};


SWIFT_CLASS("_TtC5RKRTC21RKRecordingStateModel")
@interface RKRecordingStateModel : NSObject
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable startTime;
@property (nonatomic, copy) NSString * _Nullable endTime;
@property (nonatomic, copy) NSString * _Nullable message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP5RKRTC19RKRtcClientListener_")
@protocol RKRtcClientListener <NSObject>
/// 连接成功
- (void)onRtcClientConnected;
/// 连接关闭
- (void)onRtcClientClosed;
/// 连接出错
- (void)onRtcClientError:(NSError * _Nullable)errorCode;
/// rtc 登录被踢
- (void)onRtcClientKicked;
/// 登录回调用户已经加入的频道
- (void)onJoinedChannelList:(NSArray<RKJoinedChannel *> * _Nullable)channelList;
@end

typedef SWIFT_ENUM(int32_t, RKScaleType, open) {
/// 适合
  RKScaleTypeSCALE_ASPECT_FIT = 0,
/// 填充、拉伸
  RKScaleTypeSCALE_ASPECT_FILL = 1,
/// 平衡
  RKScaleTypeSCALE_ASPECT_BALANCED = 2,
};

typedef SWIFT_ENUM(int32_t, RKSocketCode, open) {
/// 重复登录的消息，服务端只发送消息不主动断开连接，被T
  RKSocketCodeRelogin = 20001,
};

/// 大小流
typedef SWIFT_ENUM(int32_t, RKStreamType, open) {
/// 大流
  RKStreamTypeHigh = 0,
/// 小流
  RKStreamTypeLow = 1,
};

typedef SWIFT_ENUM(int32_t, RKVideoFormat, open) {
  RKVideoFormatI420 = 1,
  RKVideoFormatIYUV = 2,
  RKVideoFormatRGB24 = 3,
  RKVideoFormatABGR = 4,
  RKVideoFormatARGB = 5,
  RKVideoFormatARGB444 = 6,
  RKVideoFormatRGB565 = 7,
  RKVideoFormatARGB1555 = 8,
  RKVideoFormatYUY2 = 9,
  RKVideoFormatYV12 = 10,
  RKVideoFormatUYVY = 11,
  RKVideoFormatMJPG = 12,
  RKVideoFormatNV21 = 13,
  RKVideoFormatNV12 = 14,
  RKVideoFormatBGRA = 15,
  RKVideoFormatH264 = 16,
  RKVideoFormatH264_SVC = 17,
};


SWIFT_CLASS("_TtC5RKRTC12RKVideoFrame")
@interface RKVideoFrame : NSObject
@property (nonatomic) int32_t width;
@property (nonatomic) int32_t height;
@property (nonatomic) int64_t timeStampNs;
@property (nonatomic) int32_t chromaWidth;
@property (nonatomic, strong) RKI420Buffer * _Nullable i420Buffer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(int32_t, RKVideoRotation, open) {
  RKVideoRotationVideoRotation_0 = 0,
  RKVideoRotationVideoRotation_90 = 90,
  RKVideoRotationVideoRotation_180 = 180,
  RKVideoRotationVideoRotation_270 = 270,
};


SWIFT_PROTOCOL("_TtP5RKRTC13RKVideoSource_")
@protocol RKVideoSource <NSObject>
/// 创建
- (void)onCreate:(id <RKVideoFrameConsumer> _Nonnull)consumer;
/// 开始采集数据
- (void)onStart;
/// 结束采集数据
- (void)onStop;
@end

@protocol RKWSDelegate;
@class NSURL;
@class NSData;

SWIFT_PROTOCOL("_TtP5RKRTC12RKWSProtocol_")
@protocol RKWSProtocol <NSObject>
@property (nonatomic, strong) id <RKWSDelegate> _Nullable delegate;
/// 初始化
- (nonnull instancetype)initWithWsServer:(NSURL * _Nonnull)wsServer;
/// 连接
- (void)connect;
/// 重连
- (void)reconnect;
/// 断开连接
- (void)disconnect;
/// 关闭
- (void)close;
/// 发送数据
- (void)sendWithData:(NSData * _Nonnull)data;
/// 发送字符串
- (void)sendWithDataString:(NSString * _Nonnull)dataString;
@end


SWIFT_CLASS("_TtC5RKRTC10RKWSClient")
@interface RKWSClient : NSObject <RKWSProtocol>
@property (nonatomic, weak) id <RKWSDelegate> _Nullable delegate;
- (nonnull instancetype)initWithWsServer:(NSURL * _Nonnull)wsServer OBJC_DESIGNATED_INITIALIZER;
- (void)sendWithData:(NSData * _Nonnull)data;
- (void)sendWithDataString:(NSString * _Nonnull)dataString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SRWebSocket;

@interface RKWSClient (SWIFT_EXTENSION(RKRTC)) <SRWebSocketDelegate>
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didFailWithError:(NSError * _Nonnull)error;
- (void)webSocketDidOpen:(SRWebSocket * _Nonnull)webSocket;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didCloseWithCode:(NSInteger)code reason:(NSString * _Nullable)reason wasClean:(BOOL)wasClean;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didReceiveMessageWithString:(NSString * _Nonnull)string;
@end


@interface RKWSClient (SWIFT_EXTENSION(RKRTC))
- (void)connect;
- (void)disconnect;
- (void)close;
- (void)reconnect;
@end

enum RKWSState : NSInteger;

SWIFT_PROTOCOL("_TtP5RKRTC12RKWSDelegate_")
@protocol RKWSDelegate
@optional
/// 连接状态变更
- (void)webSocketStateDidChangeWithState:(enum RKWSState)state error:(NSError * _Nullable)error;
/// 收到消息
- (void)webSocketDidReceiveWithData:(NSData * _Nullable)data message:(RKRTCMessage * _Nonnull)message;
@end


typedef SWIFT_ENUM(NSInteger, RKWSState, open) {
/// 未连接
  RKWSStateIdle = 0,
/// 已连接
  RKWSStateConnected = 1,
/// 已断开
  RKWSStateDisconnect = 2,
/// 已关闭
  RKWSStateClosed = 3,
/// 建议重连
  RKWSStateReconnectSuggested = 4,
};


SWIFT_CLASS("_TtC5RKRTC8RKWebRTC")
@interface RKWebRTC : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) RKWebRTC * _Nonnull shared;)
+ (RKWebRTC * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(RKWebRTC * _Nonnull)value;
@property (nonatomic, copy) void (^ _Nullable loginSuccessCallBack)(id _Nullable);
@property (nonatomic, copy) void (^ _Nullable loginFailCallBack)(NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable refreshSuccessCallBack)(id _Nullable);
@property (nonatomic, copy) void (^ _Nullable refreshFailCallBack)(NSError * _Nullable);
@property (nonatomic) BOOL autoSubscribe;
/// 设备
@property (nonatomic, strong) RKMediaDevice * _Nonnull rtcDevice;
/// 频道
@property (nonatomic, strong) RKRTCChannel * _Nonnull rtcChannel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface RKWebRTC (SWIFT_EXTENSION(RKRTC)) <RKWSDelegate>
/// 连接状态变更
- (void)webSocketStateDidChangeWithState:(enum RKWSState)state error:(NSError * _Nullable)error;
/// 收到数据
- (void)webSocketDidReceiveWithData:(NSData * _Nullable)data message:(RKRTCMessage * _Nonnull)message;
@end




SWIFT_PROTOCOL("_TtP5RKRTC17RKWebRTCInterface_")
@protocol RKWebRTCInterface <NSObject>
@property (nonatomic) BOOL autoSubscribe;
/// 设备
@property (nonatomic, readonly, strong) RKMediaDevice * _Nonnull rtcDevice;
/// 频道
@property (nonatomic, readonly, strong) RKRTCChannel * _Nonnull rtcChannel;
/// 登录
/// \param appId appId
///
/// \param apiServer 服务地址
///
/// \param userId 用户token
///
/// \param token 用户token
///
- (void)loginWith:(NSString * _Nonnull)appId apiServer:(NSString * _Nonnull)apiServer userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 登出
- (void)logout;
/// 更新token
/// <ul>
///   <li>
///     Parameters
///   </li>
///   <li>
///     token 用户token
///     userId
///   </li>
/// </ul>
- (void)updateToken:(NSString * _Nonnull)token userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 开/关 Camera采集
- (void)enableCamera:(BOOL)enableCamera;
/// 切换摄像头
- (void)switchCamera;
/// 设置是否打开闪光灯
- (void)setCameraTorchOn:(BOOL)isOn onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设置音频路由设备
- (void)setAudioRouteSpeakerphone:(BOOL)speakerphone;
/// 开/关 Audio采集
- (void)enableAudio:(BOOL)enableAudio;
/// 挂断邀请
- (void)refuse:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 繁忙
- (void)busy:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设置视频流上传参数 ， fps 默认24
- (void)setPublishResolutionWithWidth:(int32_t)width height:(int32_t)height fps:(int32_t)fps;
/// 结束、退出频道
- (void)dissolutionChannel:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 添加监听WebSocket连接状态
- (void)addRtcClientListener:(id <RKRtcClientListener> _Nonnull)listener;
/// 移除监听WebSocket连接状态
- (void)removeRtcClientListener:(id <RKRtcClientListener> _Nonnull)listener;
/// 添加被叫监听
- (void)addCallEventHandler:(id <RKCallEventHandler> _Nonnull)listener;
/// 移除被叫监听
- (void)removeCallEventHandler:(id <RKCallEventHandler> _Nonnull)listener;
/// 添加视频原始数据回调
- (void)addCaptureInterceptor:(id <RKCaptureInterceptor> _Nonnull)listener;
/// 移除视频原始数据回调
- (void)removeCaptureInterceptor:(id <RKCaptureInterceptor> _Nonnull)listener;
/// 自定义视频源
- (void)setVideoSource:(id <RKVideoSource> _Nonnull)source;
/// 停止自定义视频流
- (void)stopVideoSource;
/// 自定义音频源
- (void)setAudioSource:(id <RKAudioSource> _Nonnull)source;
/// 设置音量 [0 - 10]
- (void)adjustPlaybackVolume:(double)volume;
/// 获取当前用户已加入频道  成功回调 @[RKJoinedChannel]
- (void)findJoinedChannelOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 对焦 xPercent 归一化坐标  yPercent 归一化坐标
- (void)focusWithXPercent:(float)xPercent yPercent:(float)yPercent;
/// 输出到指定音频设备
/// \param device @RKAudioDevice 
///
- (void)selectAudioWithDevice:(enum RKAudioDevice)device;
/// 获取所有可输出设备
/// 返回 [RKAudioDevice]
- (NSArray * _Nonnull)getAllAudioDevice SWIFT_WARN_UNUSED_RESULT;
/// 离开频道， 用于离开登录返回的已经在的频道
/// \param channelId 频道ID 
///
- (void)leaveWithChannelId:(NSString * _Nonnull)channelId;
/// 开启频道录制
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     resolution: 录制分辨率
///   </li>
///   <li>
///     subStream: 录制流，RKStreamType
///   </li>
///   <li>
///     bucket: 文件夹名字
///   </li>
///   <li>
///     fileName: 视频名字 重复会被覆盖
///   </li>
///   <li>
///     onSuccess: 成功回调  [recordBegininfo]
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)startServerRecording:(NSString * _Nonnull)channelId resolution:(NSString * _Nonnull)resolution subStream:(enum RKStreamType)subStream bucket:(NSString * _Nonnull)bucket fileName:(NSString * _Nonnull)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 结束频道录制
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     save: 是否保存文件，true：保存，false：不保存， 默认保存
///   </li>
/// </ul>
- (void)stopServerRecording:(NSString * _Nonnull)channelId save:(BOOL)save;
/// 获取频道录制的所有文件
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     onSuccess: 成功回调  [RKRecordingFile]
///   </li>
///   <li>
///     onFailed: 失败回调
///   </li>
/// </ul>
- (void)getServerRecordingFiles:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设置推流的最大码率
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     bitrateMapping16to9: [[640, 360, 15, 400]]
///   </li>
///   <li>
///     bitrateMapping4to3: [[480, 360, 15, 320]]
///   </li>
/// </ul>
- (void)setVideoPublishBitrate:(NSArray<NSArray<NSNumber *> *> * _Nonnull)bitrateMapping16to9 bitrateMapping4to3:(NSArray<NSArray<NSNumber *> *> * _Nonnull)bitrateMapping4to3;
/// 上报log
/// \param onSuccess 成功回调filePath
///
/// \param onFailed 失败回调
///
- (void)uploadLogOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 释放SDK，释放后需要走完整的SDK初始化登录流程
- (void)dispose;
@end


@interface RKWebRTC (SWIFT_EXTENSION(RKRTC)) <RKWebRTCInterface>
/// 上报log
- (void)uploadLogOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 登录
- (void)loginWith:(NSString * _Nonnull)appId apiServer:(NSString * _Nonnull)apiServer userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)logout;
/// 刷新token
- (void)updateToken:(NSString * _Nonnull)token userId:(NSString * _Nonnull)userId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)enableCamera:(BOOL)enableCamera;
- (void)switchCamera;
- (void)setCameraTorchOn:(BOOL)isOn onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)setAudioRouteSpeakerphone:(BOOL)speakerphone;
- (void)enableAudio:(BOOL)enableAudio;
- (void)refuse:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)busy:(NSString * _Nonnull)channelId inviteUserId:(NSString * _Nonnull)inviteUserId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)setPublishResolutionWithWidth:(int32_t)width height:(int32_t)height fps:(int32_t)fps;
- (void)dissolutionChannel:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)addRtcClientListener:(id <RKRtcClientListener> _Nonnull)listener;
- (void)removeRtcClientListener:(id <RKRtcClientListener> _Nonnull)listener;
- (void)addCallEventHandler:(id <RKCallEventHandler> _Nonnull)listener;
- (void)removeCallEventHandler:(id <RKCallEventHandler> _Nonnull)listener;
- (void)addCaptureInterceptor:(id <RKCaptureInterceptor> _Nonnull)listener;
- (void)removeCaptureInterceptor:(id <RKCaptureInterceptor> _Nonnull)listener;
- (void)setVideoSource:(id <RKVideoSource> _Nonnull)source;
- (void)stopVideoSource;
- (void)setAudioSource:(id <RKAudioSource> _Nonnull)source;
- (void)receiveAudioWithUserId:(NSString * _Nonnull)userId isEnabled:(BOOL)isEnabled;
- (void)receiveVideoWithUserId:(NSString * _Nonnull)userId isEnabled:(BOOL)isEnabled;
- (void)adjustPlaybackVolume:(double)volume;
- (void)findJoinedChannelOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)focusWithXPercent:(float)xPercent yPercent:(float)yPercent;
/// 输出到指定音频设备
- (void)selectAudioWithDevice:(enum RKAudioDevice)device;
- (NSArray * _Nonnull)getAllAudioDevice SWIFT_WARN_UNUSED_RESULT;
- (void)leaveWithChannelId:(NSString * _Nonnull)channelId;
/// 开启频道录制
- (void)startServerRecording:(NSString * _Nonnull)channelId resolution:(NSString * _Nonnull)resolution subStream:(enum RKStreamType)subStream bucket:(NSString * _Nonnull)bucket fileName:(NSString * _Nonnull)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 结束频道录制
- (void)stopServerRecording:(NSString * _Nonnull)channelId save:(BOOL)save;
/// 获取频道录制的所有文件
- (void)getServerRecordingFiles:(NSString * _Nonnull)channelId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设置推流的最大码率
- (void)setVideoPublishBitrate:(NSArray<NSArray<NSNumber *> *> * _Nonnull)bitrateMapping16to9 bitrateMapping4to3:(NSArray<NSArray<NSNumber *> *> * _Nonnull)bitrateMapping4to3;
- (void)dispose;
@end


typedef SWIFT_ENUM(NSInteger, SubsribeType, open) {
  SubsribeTypeBoth = 0,
  SubsribeTypeAudio = 1,
  SubsribeTypeVideo = 2,
  SubsribeTypeNone = 3,
};


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
