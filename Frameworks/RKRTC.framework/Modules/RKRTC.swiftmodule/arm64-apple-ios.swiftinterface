// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RKRTC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AWSCore
import AWSS3
import Accelerate
import Alamofire
import CommonCrypto
import CoreAudioTypes
import CoreGraphics
import CoreVideo
import Foundation
import MapKit
import Moya
import RKIHandyJSON
import RKILogger
import RKIUtils
import RKSocket
import Swift
import UIKit
import WebRTC
import _Concurrency
import _StringProcessing
@objc public protocol RKChannelEventHandler : ObjectiveC.NSObjectProtocol {
  @objc func onUserJoined(user: RKRTC.RKChannelUserInfo, inviteUserId: Swift.String?)
  @objc func onUserLeft(userId: Swift.String)
  @objc func onUserRefused(userId: Swift.String, inviteUserId: Swift.String)
  @objc func onUserBusy(userId: Swift.String, inviteUserId: Swift.String)
  @objc func onUserKicked(userIds: [Swift.String])
  @objc func onKicked(byUserId: Swift.String)
  @objc func onStop(byUserId: Swift.String)
  @objc func onChannelMessageReceived(_ message: Swift.String, fromUserId: Swift.String)
  @objc func onChannelThirdMessageReceived(_ message: Swift.String, fromUserId: Swift.String)
  @objc func rejoinChannel(_ userId: Swift.String)
  @objc func onRemoteUserAudioChanged(userId: Swift.String, audio: Swift.Bool)
  @objc func onRemoteUserVideoChanged(userId: Swift.String, video: Swift.Bool)
  @objc optional func onUserStartScreenShare(userId: Swift.String)
  @objc optional func onUserStopScreenShare(userId: Swift.String)
  @objc optional func onRecordingSwitch(_ isOpen: Swift.Bool)
  @objc optional func onRecordingStateChanged(_ recordingStateData: RKRTC.RKRecordingStateModel)
  @objc optional func onChannelExtraParamsChanged(userId: Swift.String?, extra: Swift.String?)
  @objc optional func onUserFirstFrameRendered(_ userId: Swift.String)
  @objc optional func onUserPublishVidepSizeChanged(_ userId: Swift.String, width: Swift.Int32, height: Swift.Int32)
  @objc optional func onVideoPublishStatus(_ userId: Swift.String, rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, qualityLimitationReason: Swift.String?)
  @objc optional func onError(_ errorCode: Swift.Int)
  @objc func onInviteFail(channelId: Swift.String, userId: Swift.String, inviteUserId: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKAudioFrame : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKVideoFrameConsumer : ObjectiveC.NSObjectProtocol {
  @objc func consumeByteBufferFrame(buffer: CoreVideo.CVPixelBuffer, format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
  @objc func consumeByteArrayFrame(data: [Swift.UInt8], format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelUserInfo : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var userId: Swift.String
  @objc public var mediaDeviceInfo: RKRTC.RKMediaDeviceInfo?
  @objc required override dynamic public init()
  @objc deinit
}
extension RKRTC.RKWebRTC : RKRTC.RKWebRTCInterface {
  @objc final public func uploadLog(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func login(with appId: Swift.String, apiServer: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func logout()
  @objc final public func updateToken(_ token: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func enableCamera(_ enableCamera: Swift.Bool)
  @objc final public func switchCamera()
  @objc final public func setCameraTorchOn(_ isOn: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func setAudioRouteSpeakerphone(_ speakerphone: Swift.Bool)
  @objc final public func enableAudio(_ enableAudio: Swift.Bool)
  @objc final public func refuse(_ channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func busy(_ channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func setPublishResolution(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32 = 24)
  @objc final public func dissolutionChannel(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func addRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc final public func removeRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc final public func addCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc final public func removeCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc final public func addCaptureInterceptor(_ listener: RKRTC.RKCaptureInterceptor)
  @objc final public func removeCaptureInterceptor(_ listener: RKRTC.RKCaptureInterceptor)
  @objc final public func setVideoSource(_ source: RKRTC.RKVideoSource)
  @objc final public func stopVideoSource()
  @objc final public func setAudioSource(_ source: RKRTC.RKAudioSource)
  @objc final public func receiveAudio(userId: Swift.String, isEnabled: Swift.Bool)
  @objc final public func receiveVideo(userId: Swift.String, isEnabled: Swift.Bool)
  @objc final public func adjustPlaybackVolume(_ volume: Swift.Double)
  @objc final public func findJoinedChannel(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func focus(xPercent: Swift.Float, yPercent: Swift.Float)
  @objc final public func selectAudio(device: RKRTC.RKAudioDevice)
  @objc final public func getAllAudioDevice() -> [Any]
  @objc final public func leave(channelId: Swift.String)
  @objc final public func startServerRecording(_ channelId: Swift.String, resolution: Swift.String, subStream: RKRTC.RKStreamType, bucket: Swift.String, fileName: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func stopServerRecording(_ channelId: Swift.String, save: Swift.Bool = true)
  @objc final public func getServerRecordingFiles(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func setVideoPublishBitrate(_ bitrateMapping16to9: Swift.Array<Swift.Array<Swift.Int32>>, bitrateMapping4to3: Swift.Array<Swift.Array<Swift.Int32>>)
  @objc final public func dispose()
}
@_hasMissingDesignatedInitializers public class TokenCacheManager {
  public static func clearTokenCache()
  @objc deinit
}
@objc public enum RKRTCStreamConnectState : Swift.Int32 {
  case disconnected
  case connecting
  case connected
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public protocol RKRTCChannelInterface : ObjectiveC.NSObjectProtocol {
  @objc var channelId: Swift.String { get }
  @objc var channelTitle: Swift.String { get }
  @objc var channelUserList: [RKRTC.RKChannelUserInfo] { get }
  @objc var autoSubscribe: Swift.Bool { get set }
  @objc func join(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, bitrate: Swift.Int32, maxDelay: Swift.Int32, inviteUserId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func join(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, bitrate: Swift.Int32, maxDelay: Swift.Int32, inviteUserId: Swift.String?, timeout: Swift.Int32, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func leave(_ channelId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func invite(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func kick(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func subscribe(userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func subscribe(userId: Swift.String, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getUserStreamState(userId: Swift.String) -> RKRTC.RKRTCStreamConnectState
  @objc func swicthSubscribeType(userId: Swift.String, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func unSubscribe(userList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func switchStream(userId: Swift.String, isHighStream: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getLocalVideoView(_ scaleType: RKRTC.RKScaleType) -> UIKit.UIView?
  @objc func getRemoteVideoView(userId: Swift.String, scaleType: RKRTC.RKScaleType, compeletBlock: (UIKit.UIView?) -> Swift.Void)
  @objc func takeSnapshot(userId: Swift.String, filePath: Swift.String, renderView: UIKit.UIView?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func publishLocalAudioStream(_ publish: Swift.Bool)
  @objc func publishLocalVideoStream(_ publish: Swift.Bool)
  @objc func setChannelEventHandler(_ channelEventHandler: RKRTC.RKChannelEventHandler?)
  @objc func setQualityHandler(_ qualityListener: RKRTC.RKAVQualityEventHandler?)
  @objc func setExtraParams(_ extras: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getExtraParams(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func sendChannelMsg(msg: Swift.String, userIdList: [Swift.String]?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func startScreenShare(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func stopScreenShare(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getChannelUserList() -> [RKRTC.RKChannelUserInfo]
  @objc func getSpaceUserList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func configVideoQuality(maxPublishBitrate: Swift.Int32, maxDelay: Swift.Int32)
}
@objc public protocol RKRtcClientListener : ObjectiveC.NSObjectProtocol {
  @objc func onRtcClientConnected()
  @objc func onRtcClientClosed()
  @objc func onRtcClientError(_ errorCode: Foundation.NSError?)
  @objc func onRtcClientKicked()
  @objc func onJoinedChannelList(_ channelList: [RKRTC.RKJoinedChannel]?)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class RKWebRTC : ObjectiveC.NSObject {
  @objc public static var shared: RKRTC.RKWebRTC
  @objc final public var loginSuccessCallBack: RKRTC.RKOnSuccess?
  @objc final public var loginFailCallBack: RKRTC.RKOnFailed?
  @objc final public var refreshSuccessCallBack: RKRTC.RKOnSuccess?
  @objc final public var refreshFailCallBack: RKRTC.RKOnFailed?
  @objc final public var autoSubscribe: Swift.Bool
  @objc final public var rtcDevice: RKRTC.RKMediaDevice
  @objc final public var rtcChannel: RKRTC.RKRTCChannel
  @objc override dynamic public init()
  @objc deinit
}
public typealias RKOnSuccess = (_ data: Any?) -> Swift.Void
public typealias RKOnFailed = (_ error: Foundation.NSError?) -> Swift.Void
@objc public protocol RKRTCAPIProtocol : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKRTC.RKRTCAPIManager! { get }
  @objc func generatorToken(sdkId: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func refreshToken(_ refreshToken: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelCreate(userIdList: [Swift.String]?, password: Swift.String?, thirdChannelId: Swift.String?, channelName: Swift.String?, channelSubject: Swift.String?, extraParams: Swift.String?, remark: Swift.String?, maxMembers: Swift.Int32, maxResolution: Swift.String, bitrate: Swift.Int32, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelJoin(channelId: Swift.String, password: Swift.String?, sdpOffer: Swift.String, mediaDeviceInfo: Swift.String, bitrate: Swift.Int32, maxDelay: Swift.Int32, inviteUserId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelInvite(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelCancelInvite(channelId: Swift.String, cancelUserIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelLeave(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelEnd(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelKick(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelRefuse(channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelBusy(channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelSetExtraParams(channelId: Swift.String, extraParams: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelGetExtraParams(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelSubscribe(channelId: Swift.String, userId: Swift.String, stram: RKRTC.RKStreamType, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func switchSubscribe(channelId: Swift.String, userId: Swift.String, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelUnsubscribe(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelSwitchStream(channelId: Swift.String, userId: Swift.String, isHighStream: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelUpdateMediaDeviceInfo(channelId: Swift.String, mediaDeviceInfo: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelGetSpaceUserList(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getChannelList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelReconnection(channelId: Swift.String, sdpOffer: Swift.String?, subscribeUserIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func sendChannelForwardMessage(channelId: Swift.String, userIdList: [Swift.String]?, sendMessageStr: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @available(*, deprecated, message: "1.3.0 弃用")
  @objc func startScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @available(*, deprecated, message: "1.3.0 弃用")
  @objc func stopScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func reportShareInfo(channelId: Swift.String, promoterUserId: Swift.String, shareInfo: Swift.String, shareType: RKRTC.RKIShareType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func queryReportShareInfo(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func queryChannelInfo(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func addChannelGraffiti(channelId: Swift.String, promoterUserId: Swift.String?, graffitiJsonList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func queryChannelGraffiti(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func clearMeetingGraffiti(channelId: Swift.String, promoterUserId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelModifyStreamConfigure(channelId: Swift.String, bitrate: Swift.Int32, minDelay: Swift.Int32, maxDelay: Swift.Int32, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelIceCandidate(channelId: Swift.String, passiveSubscribeUserId: Swift.String, iceCandidateList: [RKRTC.RKIceCandidate], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func recordingStart(channelId: Swift.String, resolution: Swift.String, subStream: RKRTC.RKStreamType, bucket: Swift.String, fileName: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func recordingEnd(channelId: Swift.String, save: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getRecordingList(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCAPIManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RKBaseResponse {
  public var success: Swift.Bool
  public var errorCode: Swift.Int {
    get
    set
  }
  public var errorMsg: Swift.String
  public var data: Any?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelUserInfoList : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var userId: Swift.String
  @objc public var mediaDeviceInfo: RKRTC.RKMediaDeviceInfo?
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc required override dynamic public init()
  @objc deinit
}
extension RKRTC.RKRTCAPIManager : RKRTC.RKRTCAPIProtocol {
  @objc public static let shared: RKRTC.RKRTCAPIManager
  @objc public static var token: Swift.String
  @objc dynamic public func getInitConfig(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func generatorToken(sdkId: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func refreshToken(_ refreshToken: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelCreate(userIdList: [Swift.String]?, password: Swift.String?, thirdChannelId: Swift.String?, channelName: Swift.String?, channelSubject: Swift.String?, extraParams: Swift.String?, remark: Swift.String?, maxMembers: Swift.Int32, maxResolution: Swift.String, bitrate: Swift.Int32 = 2000, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelJoin(channelId: Swift.String, password: Swift.String?, sdpOffer: Swift.String, mediaDeviceInfo: Swift.String, bitrate: Swift.Int32 = 2000, maxDelay: Swift.Int32 = 0, inviteUserId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelInvite(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelCancelInvite(channelId: Swift.String, cancelUserIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelLeave(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelEnd(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelKick(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelRefuse(channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelBusy(channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSetExtraParams(channelId: Swift.String, extraParams: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelGetExtraParams(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSubscribe(channelId: Swift.String, userId: Swift.String, stram: RKRTC.RKStreamType = .low, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSubscribeAnswer(channelId: Swift.String, sdpAnswer: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func switchSubscribe(channelId: Swift.String, userId: Swift.String, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelUnsubscribe(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSwitchStream(channelId: Swift.String, userId: Swift.String, isHighStream: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelUpdateMediaDeviceInfo(channelId: Swift.String, mediaDeviceInfo: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelGetSpaceUserList(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getChannelList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelReconnection(channelId: Swift.String, sdpOffer: Swift.String?, subscribeUserIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func sendChannelForwardMessage(channelId: Swift.String, userIdList: [Swift.String]?, sendMessageStr: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func startScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func stopScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func reportShareInfo(channelId: Swift.String, promoterUserId: Swift.String, shareInfo: Swift.String, shareType: RKRTC.RKIShareType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func queryReportShareInfo(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func queryChannelInfo(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func addChannelGraffiti(channelId: Swift.String, promoterUserId: Swift.String?, graffitiJsonList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func queryChannelGraffiti(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func clearMeetingGraffiti(channelId: Swift.String, promoterUserId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelModifyStreamConfigure(channelId: Swift.String, bitrate: Swift.Int32 = 2000, minDelay: Swift.Int32 = 10, maxDelay: Swift.Int32 = 0, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelIceCandidate(channelId: Swift.String, passiveSubscribeUserId: Swift.String, iceCandidateList: [RKRTC.RKIceCandidate], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func recordingStart(channelId: Swift.String, resolution: Swift.String, subStream: RKRTC.RKStreamType, bucket: Swift.String, fileName: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func recordingEnd(channelId: Swift.String, save: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getRecordingList(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelInfo : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var maxResolution: Swift.String
  @objc public var channelOwner: Swift.String
  @objc public var recordingSwitch: Swift.String
  @objc public var remark: Swift.String
  @objc public var channelName: Swift.String?
  @objc public var channelSubject: Swift.String?
  public var maxMembers: Swift.Int?
  public var startTime: Swift.Int64?
  public var endTime: Swift.Int64?
  public var shareInfo: [Any?]?
  public var graffitiInfoList: [Any?]?
  @objc required override dynamic public init()
  @objc deinit
}
@objc public enum SubsribeType : Swift.Int {
  case both = 0
  case audio = 1
  case video = 2
  case none = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias RKCompletion = (_ response: RKRTC.RKBaseResponse) -> Swift.Void
public func RKRTCModifyRKRTCAPI(disabledTrustEvaluatorHosts hosts: [Swift.String])
public var RKRTCAPI: RKRTC.RKRTCProvider {
  get
}
@_inheritsConvenienceInitializers public class RKRTCProvider : Moya.MoyaProvider<RKRTC.RKRTCAPIs> {
  public var refreshTokenBlock: ((@escaping (() -> Swift.Void)) -> Swift.Void)?
  public var refreshTokenFailBlock: ((RKRTC.RKRTCCode) -> Swift.Void)?
  public var isTokenRefreshing: Swift.Bool
  @discardableResult
  public func requestCombine(_ target: RKRTC.RKRTCAPIs, _ completion: @escaping RKRTC.RKCompletion) -> Moya.Cancellable
  @discardableResult
  override public func request(_ target: RKRTC.RKRTCAPIs, callbackQueue: Dispatch.DispatchQueue? = .none, progress: Moya.ProgressBlock? = .none, completion: @escaping Moya.Completion) -> Moya.Cancellable
  override public init(endpointClosure: @escaping Moya.MoyaProvider<RKRTC.RKRTCAPIs>.EndpointClosure = super, requestClosure: @escaping Moya.MoyaProvider<RKRTC.RKRTCAPIs>.RequestClosure = super, stubClosure: @escaping Moya.MoyaProvider<RKRTC.RKRTCAPIs>.StubClosure = super, callbackQueue: Dispatch.DispatchQueue? = nil, session: Moya.Session = super, plugins: [Moya.PluginType] = super, trackInflights: Swift.Bool = super)
  @objc deinit
}
public enum RKRTCAPIs {
  case getInitConfig
  case generatorToken(_: Swift.String, userId: Swift.String)
  case refreshToken(_: Swift.String)
  case channelCreate(userIdList: [Swift.String]?, password: Swift.String?, thirdChannelId: Swift.String?, channelName: Swift.String?, channelSubject: Swift.String?, extraParams: Swift.String?, remark: Swift.String?, maxMembers: Swift.Int32 = 16, maxResolution: Swift.String = "360P", bitrate: Swift.Int32 = 2000)
  case channelJoin(channelId: Swift.String, password: Swift.String?, sdpOffer: Swift.String, mediaDeviceInfo: Swift.String, bitrate: Swift.Int32 = 2000, minDelay: Swift.Int32 = 10, maxDelay: Swift.Int32 = 0, inviteUserId: Swift.String? = nil)
  case channelInvite(channelId: Swift.String, userIdList: [Swift.String])
  case channelCancelInvite(channelId: Swift.String, cancelUserIdList: [Swift.String])
  case channelLeave(channelId: Swift.String)
  case channelEnd(channelId: Swift.String)
  case channelKick(channelId: Swift.String, userIdList: [Swift.String])
  case channelRefuse(channelId: Swift.String, refuseState: Swift.String, inviteUserId: Swift.String)
  case channelSetExtraParams(channelId: Swift.String, extraParams: Swift.String)
  case channelGetExtraParams(channelId: Swift.String)
  case channelSubscribe(channelId: Swift.String, userId: Swift.String, stream: Swift.String = "low", subscribeType: RKRTC.SubsribeType = .both)
  case swifthSubscribeType(channelId: Swift.String, userId: Swift.String, subscribeType: RKRTC.SubsribeType = .both)
  case channelSubscribeAnswer(channelId: Swift.String, sdpAnswer: Swift.String, userId: Swift.String)
  case channelUnsubscribe(channelId: Swift.String, userIdList: [Swift.String])
  case channelSwitchStream(channelId: Swift.String, userId: Swift.String, stream: Swift.String = "low")
  case channelUpdateMediaDeviceInfo(channelId: Swift.String, mediaDeviceInfo: Swift.String)
  case channelGetSpaceUserList(channelId: Swift.String)
  case channelReconnection(channelId: Swift.String, sdpOffer: Swift.String?, subscribeUserIdDict: [[Swift.String : Swift.String]])
  case channelModifyStreamConfigure(channelId: Swift.String, bitrate: Swift.Int32 = 2000, minDelay: Swift.Int32 = 10, maxDelay: Swift.Int32 = 0)
  case channelIceCandidate(channelId: Swift.String, passiveSubscribeUserId: Swift.String, iceCandidateList: [RKRTC.RKIceCandidate])
  case forwardMessage(channelId: Swift.String, userIdList: [Swift.String]?, sendMessageStr: Swift.String)
  case getChannelInfo(channelId: Swift.String)
  case recordingStart(channelId: Swift.String, resolution: Swift.String = "360P", subStream: RKRTC.RKStreamType, bucket: Swift.String, fileName: Swift.String)
  case recordingEnd(channelId: Swift.String, save: Swift.Bool)
  case getRecordingList(channelId: Swift.String)
  case getChannelList
  case reportShareInfo(channelId: Swift.String, promoterUserId: Swift.String, shareInfo: Swift.String, shareType: RKRTC.RKIShareType)
  case getShareInfo(channelId: Swift.String)
  case screenShareSwitch(channelId: Swift.String, screenShare: Swift.String)
  case getScreenShare(channelId: Swift.String)
  case addGraffiti(channelId: Swift.String, promoterUserId: Swift.String?, graffitiInfoList: [Swift.String])
  case getGraffitiInfo(channelId: Swift.String)
  case clearGraffitiInfo(channelId: Swift.String, promoterUserId: Swift.String?)
}
extension RKRTC.RKRTCAPIs : Moya.TargetType {
  public var describeString: Swift.String {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: Moya.Method {
    get
  }
  public var task: Moya.Task {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKJoinedChannel : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String
  @objc public var password: Swift.String
  @objc public var channelName: Swift.String?
  @objc public var channelSubject: Swift.String?
  public var maxMembers: Swift.Int32?
  @objc public var maxResolution: Swift.String?
  @objc public var extraParams: Swift.String?
  @objc public var remark: Swift.String?
  @objc public var membersList: [RKRTC.RKChannelUserInfo]?
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIceCandidate : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var candidate: Swift.String
  @objc public var sdpMLineIndex: Swift.Int32
  @objc public var sdpMid: Swift.String
  @objc public var passiveSubscribeUserId: Swift.String
  @objc public var rtcIceCandidate: WebRTC.RTCIceCandidate {
    @objc get
  }
  @objc required override dynamic public init()
  @objc deinit
}
@objc public protocol RKVideoSource : ObjectiveC.NSObjectProtocol {
  @objc func onCreate(_ consumer: RKRTC.RKVideoFrameConsumer)
  @objc func onStart()
  @objc func onStop()
}
@objc public protocol RKAVQualityEventHandler : ObjectiveC.NSObjectProtocol {
  @objc func onRemoteAudioStatus(_ userId: Swift.String, audioLevel: Swift.Double, totalAudioEnergy: Swift.Double, totalSamplesDuration: Swift.Double, packetsLost: Swift.Int32)
  @objc func onRemoteVideoStatus(_ userId: Swift.String, rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, packetsLost: Swift.Int32)
  @objc func onAudioStatus(audioLevel: Swift.Double, totalAudioEnergy: Swift.Double, totalSamplesDuration: Swift.Double)
  @objc func onAudiobBitrate(_ userId: Swift.String, bitrate: Swift.Int32, networkQualityState: RKRTC.RKNetworkQualityState)
  @objc func onVideoRecordStatus(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc func onVideoPublishStatus(rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, qualityLimitationReason: Swift.String?, networkQualityState: RKRTC.RKNetworkQualityState)
  @objc func onVideoStreamUnstable(userId: Swift.String, lossRate: Swift.Float)
  @objc func onUserNetworkQuality(userId: Swift.String, networkQualityState: RKRTC.RKNetworkQualityState)
  @objc func onUserStreamConnectState(userId: Swift.String, streamConnectState: RKRTC.RKRTCStreamConnectState)
}
@objc public protocol RKAudioSource : ObjectiveC.NSObjectProtocol {
  @objc func onCreate(consumer: RKRTC.RKAudioConsumer)
  @objc func onStart()
  @objc func onStop()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCChannel : ObjectiveC.NSObject {
  @objc public var channelId: Swift.String
  @objc public var channelTitle: Swift.String
  @objc public var channelUserList: [RKRTC.RKChannelUserInfo]
  @objc public var videoViews: [Swift.String : UIKit.UIView]
  @objc public var autoSubscribe: Swift.Bool
  public var trackSuccesBlockDict: [Swift.String : (() -> Swift.Void)]
  @objc public var enableSimulcast: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension RKRTC.RKRTCChannel {
  @objc dynamic public func stop(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
extension RKRTC.RKRTCChannel : WebRTC.RTCVideoViewDelegate {
  @objc dynamic public func videoView(_ videoView: WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
@_hasMissingDesignatedInitializers public class RKMediaDataManager {
  public static let shared: RKRTC.RKMediaDataManager
  public var defaultMediaType: RKRTC.SubsribeType
  public var defaultStreamType: RKRTC.RKStreamType
  public func clear()
  @objc deinit
}
@objc public enum RKRTCCode : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case OK = 0
  case SDK_NOT_INIT = 1
  case OTHER_ERROR = 199
  case REQUEST_PARAMS_NULL = 10001
  case CHANNEL_ID_NULL = 10002
  case CHANNEL_ID_ERROR = 10003
  case CHANNEL_IS_NOT_EXIST = 10004
  case USERID_IS_NULL = 10005
  case CHANNEL_CREATE_ERROR = 10006
  case CHANNEL_JOIN_ERROR = 10007
  case LEAVE_OPERATE_ERROR = 10008
  case USER_EXIST_CHANNEL = 10009
  case USER_IS_SUBSCRIBE = 10010
  case USER_IS_NOT_CHANNEL_SPACE = 10011
  case CHANNEL_PASSWORD_IS_ERROR = 10012
  case SUBSCRIBE_IS_NOT_EXIST = 10013
  case USER_IS_NOT_EXIST_CHANNEL = 10014
  case CHANNEL_ID_IS_EXIST = 10015
  case CHANNEL_MEMBERS_IS_FULL = 10016
  case USER_LIST_IS_EMPTY = 10017
  case USER_ALREADY_FULL = 10028
  case SEND_MESSAGE_IS_NULL = 10029
  case TOKEN_IS_NULL = 20001
  case TOKEN_IS_INVALID = 2002
  case TOKEN_IS_NOT_FORM_SERVER = 20003
  case APP_ID_IS_NULL = 20004
  case TOKEN_IS_EXPIRE = 20005
  case APPID_IS_NOT_EXIST = 20006
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RKRTC.RKRTCChannel : RKRTC.RKRTCChannelInterface {
  @objc dynamic public func join(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, bitrate: Swift.Int32 = 2000, maxDelay: Swift.Int32 = 0, inviteUserId: Swift.String? = nil, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func join(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, bitrate: Swift.Int32 = 2000, maxDelay: Swift.Int32 = 0, inviteUserId: Swift.String? = nil, timeout: Swift.Int32 = 30, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func realJoin(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, bitrate: Swift.Int32, maxDelay: Swift.Int32, inviteUserId: Swift.String? = nil, timeout: Swift.Int32 = 30, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func leave(_ channelId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func invite(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func kick(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func subscribe(userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func subscribe(userId: Swift.String, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getUserStreamState(userId: Swift.String) -> RKRTC.RKRTCStreamConnectState
  @objc dynamic public func swicthSubscribeType(userId: Swift.String, mediaType: RKRTC.SubsribeType, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func unSubscribe(userList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func switchStream(userId: Swift.String, isHighStream: Swift.Bool = false, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getLocalVideoView(_ scaleType: RKRTC.RKScaleType = .SCALE_ASPECT_FIT) -> UIKit.UIView?
  @objc dynamic public func getRemoteVideoView(userId: Swift.String, scaleType: RKRTC.RKScaleType = .SCALE_ASPECT_FIT, compeletBlock: (UIKit.UIView?) -> Swift.Void)
  @objc dynamic public func takeSnapshot(userId: Swift.String, filePath: Swift.String, renderView: UIKit.UIView?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func publishLocalAudioStream(_ publish: Swift.Bool)
  @objc dynamic public func publishLocalVideoStream(_ publish: Swift.Bool)
  @objc dynamic public func setChannelEventHandler(_ channelEventHandler: RKRTC.RKChannelEventHandler?)
  @objc dynamic public func setQualityHandler(_ qualityListener: RKRTC.RKAVQualityEventHandler?)
  @objc dynamic public func setExtraParams(_ extras: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getExtraParams(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func sendChannelMsg(msg: Swift.String, userIdList: [Swift.String]? = nil, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func startScreenShare(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func stopScreenShare(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getChannelUserList() -> [RKRTC.RKChannelUserInfo]
  @objc dynamic public func getSpaceUserList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func configVideoQuality(maxPublishBitrate: Swift.Int32, maxDelay: Swift.Int32)
  @objc dynamic public func publishDeviceDirectio()
}
@_inheritsConvenienceInitializers @objcMembers @objc public class RKI420Buffer : ObjectiveC.NSObject {
  @objc public var chromaWidth: Swift.Int32
  @objc public var chromaHeight: Swift.Int32
  @objc public var dataY: Swift.UnsafePointer<Swift.UInt8>?
  @objc public var dataU: Swift.UnsafePointer<Swift.UInt8>?
  @objc public var dataV: Swift.UnsafePointer<Swift.UInt8>?
  @objc public var strideY: Swift.Int32
  @objc public var strideU: Swift.Int32
  @objc public var strideV: Swift.Int32
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc public class RKVideoFrame : ObjectiveC.NSObject {
  @objc public var width: Swift.Int32
  @objc public var height: Swift.Int32
  @objc public var timeStampNs: Swift.Int64
  @objc public var chromaWidth: Swift.Int32
  @objc public var i420Buffer: RKRTC.RKI420Buffer?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCConfigManager : ObjectiveC.NSObject {
  @objc public static var shared: RKRTC.RKRTCConfigManager
  @objc public var pUserId: Swift.String {
    @objc get
  }
  @objc public func resetUserAuthInfo()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRecordingFile : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String?
  @objc public var url: Swift.String?
  @objc public var startTime: Swift.Double
  @objc public var endTime: Swift.Double
  @objc public var resolution: Swift.String?
  public var subStream: RKRTC.RKStreamType?
  @objc public var recordingState: Swift.String?
  @objc public var message: Swift.String?
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelActionMsg : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var operateType: RKRTC.RKChannelOperationType
  @objc public var activeOperateUser: Swift.String?
  @objc public var passiveOperateUserList: [Swift.String]?
  @objc public var mediaDeviceInfo: RKRTC.RKMediaDeviceInfo?
  @objc public var password: Swift.String?
  @objc public var channelName: Swift.String?
  @objc public var channelSubject: Swift.String?
  @objc public var extraParams: Swift.String?
  @objc public var remark: Swift.String?
  public var maxMembers: Swift.Int?
  @objc public var refuseState: Swift.String?
  @objc public var inviteUserId: Swift.String?
  @objc public var maxResolution: Swift.String?
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc required override dynamic public init()
  @objc deinit
}
@objc public enum RKWSState : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case idle
  case connected
  case disconnect
  case closed
  case reconnectSuggested
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RKWSProtocol : ObjectiveC.NSObjectProtocol {
  @objc var delegate: RKRTC.RKWSDelegate? { get set }
  @objc init(wsServer: Foundation.URL)
  @objc func connect()
  @objc func reconnect()
  @objc func disconnect()
  @objc func close()
  @objc func send(data: Foundation.Data)
  @objc func send(dataString: Swift.String)
}
@objc public protocol RKWSDelegate {
  @objc optional func webSocketStateDidChange(state: RKRTC.RKWSState, error: Foundation.NSError?)
  @objc optional func webSocketDidReceive(data: Foundation.Data?, message: RKRTC.RKRTCMessage)
}
@objc public protocol RKAudioConsumer : ObjectiveC.NSObjectProtocol {
  @objc func consumeByteBufferFrame(inputId: Swift.String, sampleRateHz: Swift.Int32, channels: Swift.Int32, data: Swift.Int8, playDelayMS: Swift.Int32, recDelayMS: Swift.Int32, clockDrift: Swift.Int32)
  @objc func startCustomAudio()
  @objc func customAudio()
  @objc func endCustomAudio()
}
@objc @objcMembers final public class RKWSClient : ObjectiveC.NSObject, RKRTC.RKWSProtocol {
  @objc weak final public var delegate: RKRTC.RKWSDelegate?
  @objc deinit
  @objc public init(wsServer: Foundation.URL)
  @objc final public func send(data: Foundation.Data)
  @objc final public func send(dataString: Swift.String)
}
extension RKRTC.RKWSClient : RKSocket.SRWebSocketDelegate {
  @objc final public func webSocket(_ webSocket: RKSocket.SRWebSocket, didFailWithError error: Swift.Error)
  @objc final public func webSocketDidOpen(_ webSocket: RKSocket.SRWebSocket)
  @objc final public func webSocket(_ webSocket: RKSocket.SRWebSocket, didCloseWithCode code: Swift.Int, reason: Swift.String?, wasClean: Swift.Bool)
  @objc final public func webSocket(_ webSocket: RKSocket.SRWebSocket, didReceiveMessageWith string: Swift.String)
}
extension RKRTC.RKWSClient {
  @objc final public func connect()
  @objc final public func disconnect()
  @objc final public func close()
  @objc final public func reconnect()
}
@objc public protocol RKCallEventHandler : ObjectiveC.NSObjectProtocol {
  @objc func onReceiveCall(channelId: Swift.String, channelActionMsg: RKRTC.RKChannelActionMsg)
  @objc func onCallCanceled(channelId: Swift.String, userId: Swift.String)
}
@objc public protocol RKCaptureInterceptor : ObjectiveC.NSObjectProtocol {
  @objc func onIntercept(_ buffer: RKRTC.RKVideoFrame)
}
public enum RKWSMessageType : Swift.String, RKIHandyJSON.HandyJSONEnum {
  case HEARTBEAT_PLUS
  case CHANNEL_ACTION
  case FORWARD
  case THIRD_FORWARD
  case MEDIA_DEVICE
  case EXTRA_PARAMS
  case AGAIN_SUBSCRIBE
  case SCREEN_SHARE
  case SOCKET
  case RECORDING_SWITCH
  case RECORDING_STATE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum RKChannelOperationType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case NONE
  case CREATE
  case INVITE
  case JOIN
  case LEAVE
  case KICK
  case REFUSE
  case CALL_CANCEL
  case END
  case REJOIN
  case INVITE_FAIL
  public typealias RawValue = Swift.String
  public var rawValue: RKRTC.RKChannelOperationType.RawValue {
    get
  }
  public init?(rawValue: RKRTC.RKChannelOperationType.RawValue)
}
@objc public enum RKRTCConnectionState : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case New
  case Checking
  case Connected
  case Completed
  case Failed
  case Disconnected
  case Closed
  case Count
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKScaleType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case SCALE_ASPECT_FIT = 0
  case SCALE_ASPECT_FILL
  case SCALE_ASPECT_BALANCED
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKVideoRotation : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case VideoRotation_0 = 0
  case VideoRotation_90 = 90
  case VideoRotation_180 = 180
  case VideoRotation_270 = 270
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKVideoFormat : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case I420 = 1
  case IYUV = 2
  case RGB24 = 3
  case ABGR = 4
  case ARGB = 5
  case ARGB444 = 6
  case RGB565 = 7
  case ARGB1555 = 8
  case YUY2 = 9
  case YV12 = 10
  case UYVY = 11
  case MJPG = 12
  case NV21 = 13
  case NV12 = 14
  case BGRA = 15
  case H264 = 16
  case H264_SVC = 17
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKIShareType : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case none = 0
  case screenShare = 1
  case doodle = 2
  case slam = 3
  case videoPoint = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RKAudioDevice : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case speakerPhone = 1
  case earpiece = 2
  case wiredHeadset = 3
  case bluetooth = 4
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKSocketCode : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case relogin = 20001
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKStreamType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case high = 0
  case low
  public typealias RawValue = Swift.String
  public var rawValue: RKRTC.RKStreamType.RawValue {
    get
  }
  public init?(rawValue: RKRTC.RKStreamType.RawValue)
}
@objc public enum RKRecordingState : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case recording = 0
  case uploading
  case done
  case error
  public typealias RawValue = Swift.String
  public var rawValue: RKRTC.RKRecordingState.RawValue {
    get
  }
  public init?(rawValue: RKRTC.RKRecordingState.RawValue)
}
@objc public enum RKNetworkQualityState : Swift.Int32 {
  case UNKNOWN = 0
  case EXCELLENT = 1
  case GOOD = 2
  case BAD = 3
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKAVAnalysisModel : ObjectiveC.NSObject {
  @objc public var userId: Swift.String
  @objc public var packetsLost: Swift.Int32
  @objc public var rid: Swift.String
  @objc public var width: Swift.Int32
  @objc public var height: Swift.Int32
  @objc public var fps: Swift.Int32
  @objc public var bitrate: Swift.Int32
  @objc public var lossRate: Swift.Float
  @objc public var qualityLimitationReason: Swift.String
  @objc public var audioLevel: Swift.Double
  @objc public var totalAudioEnergy: Swift.Double
  @objc public var totalSamplesDuration: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  public var messageType: RKRTC.RKWSMessageType?
  @objc public var messageData: Any?
  @objc public var messageId: Swift.String?
  @objc public var timestamp: Swift.Int64
  @objc public var channelId: Swift.String?
  @objc public var userId: Swift.String?
  @objc required override dynamic public init()
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static func isIPhone11Series() -> Swift.Bool
}
extension RKRTC.RKWebRTC : RKRTC.RKWSDelegate {
  @objc final public func webSocketStateDidChange(state: RKRTC.RKWSState, error: Foundation.NSError?)
  @objc final public func webSocketDidReceive(data: Foundation.Data?, message: RKRTC.RKRTCMessage)
}
@objc public protocol RKWebRTCInterface : ObjectiveC.NSObjectProtocol {
  @objc var autoSubscribe: Swift.Bool { get set }
  @objc var rtcDevice: RKRTC.RKMediaDevice { get }
  @objc var rtcChannel: RKRTC.RKRTCChannel { get }
  @objc func login(with appId: Swift.String, apiServer: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func logout()
  @objc func updateToken(_ token: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func enableCamera(_ enableCamera: Swift.Bool)
  @objc func switchCamera()
  @objc func setCameraTorchOn(_ isOn: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func setAudioRouteSpeakerphone(_ speakerphone: Swift.Bool)
  @objc func enableAudio(_ enableAudio: Swift.Bool)
  @objc func refuse(_ channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func busy(_ channelId: Swift.String, inviteUserId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func setPublishResolution(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc func dissolutionChannel(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func addRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc func removeRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc func addCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc func removeCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc func addCaptureInterceptor(_ listener: RKRTC.RKCaptureInterceptor)
  @objc func removeCaptureInterceptor(_ listener: RKRTC.RKCaptureInterceptor)
  @objc func setVideoSource(_ source: RKRTC.RKVideoSource)
  @objc func stopVideoSource()
  @objc func setAudioSource(_ source: RKRTC.RKAudioSource)
  @objc func adjustPlaybackVolume(_ volume: Swift.Double)
  @objc func findJoinedChannel(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func focus(xPercent: Swift.Float, yPercent: Swift.Float)
  @objc func selectAudio(device: RKRTC.RKAudioDevice)
  @objc func getAllAudioDevice() -> [Any]
  @objc func leave(channelId: Swift.String)
  @objc func startServerRecording(_ channelId: Swift.String, resolution: Swift.String, subStream: RKRTC.RKStreamType, bucket: Swift.String, fileName: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func stopServerRecording(_ channelId: Swift.String, save: Swift.Bool)
  @objc func getServerRecordingFiles(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func setVideoPublishBitrate(_ bitrateMapping16to9: Swift.Array<Swift.Array<Swift.Int32>>, bitrateMapping4to3: Swift.Array<Swift.Array<Swift.Int32>>)
  @objc func uploadLog(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func dispose()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMediaDeviceInfo : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var audio: Swift.Bool
  @objc public var video: Swift.Bool
  @objc public var netQuality: Swift.Int32
  @objc public var volumeEnergy: Swift.Int32
  @objc public var videoWidth: Swift.Int32
  @objc public var videoHeight: Swift.Int32
  @objc public var screenShare: Swift.Bool
  @objc public var portraitDegree: Swift.Int
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMediaDevice : ObjectiveC.NSObject {
  @objc public var position: AVFoundation.AVCaptureDevice.Position
  @objc public var isLightOn: Swift.Bool {
    @objc get
  }
  @objc final public let mediaDeviceInfo: RKRTC.RKMediaDeviceInfo
  @objc deinit
  @objc public func startCapture()
  @objc public func stopCapture(_ c: @escaping () -> Swift.Void)
  @objc public func switchCamera()
  @objc public func lightTurn(_ turnOn: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc override dynamic public init()
}
extension RKRTC.RKMediaDevice : WebRTC.RTCVideoRenderer {
  @objc dynamic public func renderFrame(_ frame: WebRTC.RTCVideoFrame?)
  @objc dynamic public func setSize(_ size: CoreFoundation.CGSize)
}
extension RKRTC.RKMediaDevice : RKRTC.RKVideoFrameConsumer {
  @objc dynamic public func consumeByteBufferFrame(buffer: CoreVideo.CVPixelBuffer, format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
  @objc dynamic public func consumeByteArrayFrame(data: [Swift.UInt8], format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
}
extension RKRTC.RKMediaDevice : RKRTC.RKAudioConsumer {
  @objc dynamic public func startCustomAudio()
  @objc dynamic public func customAudio()
  @objc dynamic public func endCustomAudio()
  @objc dynamic public func consumeByteBufferFrame(inputId: Swift.String, sampleRateHz: Swift.Int32, channels: Swift.Int32, data: Swift.Int8, playDelayMS: Swift.Int32, recDelayMS: Swift.Int32, clockDrift: Swift.Int32)
}
extension RKRTC.RKMediaDevice : WebRTC.RTCAudioSessionDelegate {
  @objc dynamic public func audioSession(_ audioSession: WebRTC.RTCAudioSession, didCapture audioFrame: WebRTC.RTCAudioFrame) -> WebRTC.RTCAudioFrame
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRecordingStateModel : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  public var recordingState: RKRTC.RKRecordingState?
  @objc public var url: Swift.String?
  @objc public var startTime: Swift.String?
  @objc public var endTime: Swift.String?
  @objc public var message: Swift.String?
  @objc required override dynamic public init()
  @objc deinit
}
extension RKRTC.RKRTCStreamConnectState : Swift.Equatable {}
extension RKRTC.RKRTCStreamConnectState : Swift.Hashable {}
extension RKRTC.RKRTCStreamConnectState : Swift.RawRepresentable {}
extension RKRTC.SubsribeType : Swift.Equatable {}
extension RKRTC.SubsribeType : Swift.Hashable {}
extension RKRTC.SubsribeType : Swift.RawRepresentable {}
extension RKRTC.RKRTCCode : Swift.Equatable {}
extension RKRTC.RKRTCCode : Swift.Hashable {}
extension RKRTC.RKRTCCode : Swift.RawRepresentable {}
extension RKRTC.RKWSState : Swift.Equatable {}
extension RKRTC.RKWSState : Swift.Hashable {}
extension RKRTC.RKWSState : Swift.RawRepresentable {}
extension RKRTC.RKWSMessageType : Swift.Equatable {}
extension RKRTC.RKWSMessageType : Swift.Hashable {}
extension RKRTC.RKWSMessageType : Swift.RawRepresentable {}
extension RKRTC.RKChannelOperationType : Swift.Equatable {}
extension RKRTC.RKChannelOperationType : Swift.Hashable {}
extension RKRTC.RKChannelOperationType : Swift.RawRepresentable {}
extension RKRTC.RKRTCConnectionState : Swift.Equatable {}
extension RKRTC.RKRTCConnectionState : Swift.Hashable {}
extension RKRTC.RKRTCConnectionState : Swift.RawRepresentable {}
extension RKRTC.RKScaleType : Swift.Equatable {}
extension RKRTC.RKScaleType : Swift.Hashable {}
extension RKRTC.RKScaleType : Swift.RawRepresentable {}
extension RKRTC.RKVideoRotation : Swift.Equatable {}
extension RKRTC.RKVideoRotation : Swift.Hashable {}
extension RKRTC.RKVideoRotation : Swift.RawRepresentable {}
extension RKRTC.RKVideoFormat : Swift.Equatable {}
extension RKRTC.RKVideoFormat : Swift.Hashable {}
extension RKRTC.RKVideoFormat : Swift.RawRepresentable {}
extension RKRTC.RKIShareType : Swift.Equatable {}
extension RKRTC.RKIShareType : Swift.Hashable {}
extension RKRTC.RKIShareType : Swift.RawRepresentable {}
extension RKRTC.RKAudioDevice : Swift.Equatable {}
extension RKRTC.RKAudioDevice : Swift.Hashable {}
extension RKRTC.RKAudioDevice : Swift.RawRepresentable {}
extension RKRTC.RKSocketCode : Swift.Equatable {}
extension RKRTC.RKSocketCode : Swift.Hashable {}
extension RKRTC.RKSocketCode : Swift.RawRepresentable {}
extension RKRTC.RKStreamType : Swift.Equatable {}
extension RKRTC.RKStreamType : Swift.Hashable {}
extension RKRTC.RKStreamType : Swift.RawRepresentable {}
extension RKRTC.RKRecordingState : Swift.Equatable {}
extension RKRTC.RKRecordingState : Swift.Hashable {}
extension RKRTC.RKRecordingState : Swift.RawRepresentable {}
extension RKRTC.RKNetworkQualityState : Swift.Equatable {}
extension RKRTC.RKNetworkQualityState : Swift.Hashable {}
extension RKRTC.RKNetworkQualityState : Swift.RawRepresentable {}
