// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RKRTC
import AVFoundation
import Alamofire
import CommonCrypto
import CoreGraphics
import Foundation
import Moya
import RKIHandyJSON
import RKILogger
import RKIUtils
import Starscream
import Swift
import UIKit
import WebRTC
import _Concurrency
@objc public protocol RKVideoSource : ObjectiveC.NSObjectProtocol {
  @objc func onCreate(_ consumer: RKRTC.RKVideoFrameConsumer)
  @objc func onStart()
  @objc func onStop()
}
@objc public protocol RKVideoFrameConsumer : ObjectiveC.NSObjectProtocol {
  @objc func consumeByteBufferFrame(buffer: CoreVideo.CVPixelBuffer, format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
  @objc func consumeByteArrayFrame(data: [Swift.UInt8], format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
}
@objc public protocol RKChannelEventHandler : ObjectiveC.NSObjectProtocol {
  @objc func onUserJoined(user: RKRTC.RKChannelUserInfo)
  @objc func onUserLeft(userId: Swift.String)
  @objc func onUserRefused(userId: Swift.String)
  @objc func onUserBusy(userId: Swift.String)
  @objc func onUserKicked(userIds: [Swift.String])
  @objc func onKicked(byUserId: Swift.String)
  @objc func onStop(byUserId: Swift.String)
  @objc func onChannelMessageReceived(_ message: Swift.String)
  @objc func onRemoteUserAudioChanged(userId: Swift.String, audio: Swift.Bool)
  @objc func onRemoteUserVideoChanged(userId: Swift.String, video: Swift.Bool)
  @objc optional func onUserStartScreenShare(userId: Swift.String)
  @objc optional func onUserStopScreenShare(userId: Swift.String)
  @objc optional func onChannelExtraParamsChanged(userId: Swift.String?, extra: Swift.String?)
  @objc optional func onUserFirstFrameRendered(_ userId: Swift.String)
  @objc optional func onUserPublishVidepSizeChanged(_ userId: Swift.String, width: Swift.Int32, height: Swift.Int32)
  @objc optional func onOutboundVideoSize(_ userId: Swift.String, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, rid: Swift.String?)
  @objc optional func onError(_ errorCode: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMediaDeviceInfo : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var audio: Swift.Bool
  @objc public var video: Swift.Bool
  @objc public var netQuality: Swift.Int32
  @objc public var volumeEnergy: Swift.Int32
  @objc public var videoWidth: Swift.Int32
  @objc public var videoHeight: Swift.Int32
  @objc public var screenShare: Swift.Bool
  @objc required override dynamic public init()
  @objc deinit
}
@objc public protocol RKRTCChannelInterface : ObjectiveC.NSObjectProtocol {
  @objc var channelId: Swift.String { get }
  @objc var channelTitle: Swift.String { get }
  @objc func join(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func leave(_ channelId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func invite(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func kick(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func subscribe(userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func unSubscribe(userList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func switchStream(userId: Swift.String, isHighStram: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getLocalVideoView(_ scaleType: RKRTC.RKScaleType) -> UIKit.UIView?
  @objc func getRemoteVideoView(userId: Swift.String, scaleType: RKRTC.RKScaleType, compeletBlock: (UIKit.UIView?) -> Swift.Void)
  @objc func takeSnapshot(userId: Swift.String, filePath: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func publishLocalAudioStream(_ publish: Swift.Bool)
  @objc func publishLocalVideoStream(_ publish: Swift.Bool)
  @objc func setChannelEventHandler(_ channelEventHandler: RKRTC.RKChannelEventHandler?)
  @objc func setExtraParams(_ extras: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getExtraParams(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func sendChannelMsg(msg: Swift.String)
  @objc func startScreenShare(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc func stopScreenShare()
  @objc func getChannelUserList() -> [RKRTC.RKChannelUserInfo]
  @objc func getSpaceUserList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
@objc public protocol RKAudioConsumer : ObjectiveC.NSObjectProtocol {
  @objc func consumeByteBufferFrame(inputId: Swift.String, sampleRateHz: Swift.Int32, channels: Swift.Int32, data: Swift.Int8, playDelayMS: Swift.Int32, recDelayMS: Swift.Int32, clockDrift: Swift.Int32)
}
@objc public enum RKWSState : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case idle
  case connected
  case disconnect
  case closed
  case reconnectSuggested
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RKWSProtocol : ObjectiveC.NSObjectProtocol {
  @objc var delegate: RKRTC.RKWSDelegate? { get set }
  @objc init(wsServer: Foundation.URL)
  @objc func connect()
  @objc func reconnect()
  @objc func disconnect()
  @objc func close()
  @objc func send(data: Foundation.Data)
  @objc func send(dataString: Swift.String)
}
@objc public protocol RKWSDelegate {
  @objc optional func webSocketStateDidChange(state: RKRTC.RKWSState, error: Foundation.NSError?)
  @objc optional func webSocketDidReceive(data: Foundation.Data?, message: RKRTC.RKRTCMessage)
}
@objc public protocol RKAudioSource : ObjectiveC.NSObjectProtocol {
  @objc func onCreate(consumer: RKRTC.RKAudioConsumer)
  @objc func onStart()
  @objc func onStop()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIceCandidate : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var candidate: Swift.String
  @objc public var sdpMLineIndex: Swift.Int32
  @objc public var sdpMid: Swift.String
  @objc public var passiveSubscribeUserId: Swift.String
  @objc public var rtcIceCandidate: WebRTC.RTCIceCandidate {
    @objc get
  }
  @objc required override dynamic public init()
  @objc deinit
}
public typealias RKOnSuccess = (_ data: Any?) -> Swift.Void
public typealias RKOnFailed = (_ error: Foundation.NSError?) -> Swift.Void
@objc public protocol RKRTCAPIProtocol : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKRTC.RKRTCAPIManager! { get }
  @objc func checkToken(token: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelCreate(userIdList: [Swift.String]?, password: Swift.String?, thirdChannelId: Swift.String?, channelName: Swift.String?, channelSubject: Swift.String?, extraParams: Swift.String?, recordParams: Swift.String?, remark: Swift.String?, maxMembers: Swift.Int, maxResolution: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelJoin(channelId: Swift.String, password: Swift.String?, sdpOffer: Swift.String, mediaDeviceInfo: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelInvite(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelLeave(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelEnd(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelKick(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelRefuse(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelBusy(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelSetExtraParams(channelId: Swift.String, extraParams: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelGetExtraParams(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelSubscribe(channelId: Swift.String, userId: Swift.String, isHighStram: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelUnsubscribe(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelSwitchStream(channelId: Swift.String, userId: Swift.String, isHighStram: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelUpdateMediaDeviceInfo(channelId: Swift.String, mediaDeviceInfo: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelGetSpaceUserList(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getChannelList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func channelReconnection(channelId: Swift.String, sdpOffer: Swift.String?, subscribeUserIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func startScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func stopScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func getScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCAPIManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKCallEventHandler : ObjectiveC.NSObjectProtocol {
  @objc func onReceiveCall(channelId: Swift.String, channelActionMsg: RKRTC.RKChannelActionMsg)
}
@objc public protocol RKWebRTCInterface : ObjectiveC.NSObjectProtocol {
  @objc var autoSubscribe: Swift.Bool { get set }
  @objc var rtcDevice: RKRTC.RKMediaDevice { get }
  @objc var rtcChannel: RKRTC.RKRTCChannel { get }
  @objc func login(saasUrl: Swift.String, wssUrl: Swift.String, userId: Swift.String, token: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func enableCamera(_ enableCamera: Swift.Bool)
  @objc func switchCamera()
  @objc func setCameraTorchOn(_ isOn: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func setAudioRouteSpeakerphone(_ speakerphone: Swift.Bool)
  @objc func enableAudio(_ enableAudio: Swift.Bool)
  @objc func refuse(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func setPublishResolution(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc func dissolutionChannel(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func addRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc func removeRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc func addCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc func removeCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc func setVideoSource(_ source: RKRTC.RKVideoSource)
  @objc func stopVideoSource()
  @objc func setAudioSource(_ source: RKRTC.RKAudioSource)
  @objc func adjustPlaybackVolume(_ volume: Swift.Double)
  @objc func findJoinedChannel(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc func focus(xPercent: Swift.Float, yPercent: Swift.Float)
  @objc func leave(channelId: Swift.String)
  @objc func dispose()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCConfigManager : ObjectiveC.NSObject {
  @objc public static var shared: RKRTC.RKRTCConfigManager
  @objc public var iceServers: [Swift.String]
  @objc public var apiServer: Foundation.URL?
  @objc public var sessionServer: Foundation.URL?
  @objc public var userId: Swift.String
  @objc public var token: Swift.String
  @objc public var iceConnectionTimeout: Swift.Int32
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum RKRTCCode : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case OK = 0
  case SDK_NOT_INIT = 1
  case OTHER_ERROR = 199
  case REQUEST_PARAMS_NULL = 10001
  case CHANNEL_ID_NULL = 10002
  case CHANNEL_ID_ERROR = 10003
  case CHANNEL_IS_NOT_EXIST = 10004
  case USERID_IS_NULL = 10005
  case CHANNEL_CREATE_ERROR = 10006
  case CHANNEL_JOIN_ERROR = 10007
  case LEAVE_OPERATE_ERROR = 10008
  case USER_EXIST_CHANNEL = 10009
  case USER_IS_SUBSCRIBE = 10010
  case USER_IS_NOT_CHANNEL_SPACE = 10011
  case CHANNEL_PASSWORD_IS_ERROR = 10012
  case SUBSCRIBE_IS_NOT_EXIST = 10013
  case USER_IS_NOT_EXIST_CHANNEL = 10014
  case CHANNEL_ID_IS_EXIST = 10015
  case CHANNEL_MEMBERS_IS_FULL = 10016
  case USER_LIST_IS_EMPTY = 10017
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RKRtcClientListener : ObjectiveC.NSObjectProtocol {
  @objc func onRtcClientConnected()
  @objc func onRtcClientClosed()
  @objc func onRtcClientError(_ errorCode: Foundation.NSError?)
  @objc func onRtcClientKicked()
  @objc func onJoinedChannelList(_ channelList: [RKRTC.RKJoinedChannel]?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelActionMsg : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var operateType: RKRTC.RKChannelOperationType
  @objc public var activeOperateUser: Swift.String?
  @objc public var passiveOperateUserList: [Swift.String]?
  @objc public var mediaDeviceInfo: RKRTC.RKMediaDeviceInfo?
  @objc public var password: Swift.String?
  @objc public var channelName: Swift.String?
  @objc public var channelSubject: Swift.String?
  @objc public var extraParams: Swift.String?
  @objc public var recordParams: Swift.String?
  @objc public var remark: Swift.String?
  public var maxMembers: Swift.Int32?
  @objc public var refuseState: Swift.String?
  public var maxResolution: RKRTC.RKMaxResolution?
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc required override dynamic public init()
  @objc deinit
}
public typealias RKCompletion = (_ response: RKRTC.RKBaseResponse) -> Swift.Void
public let RKRTCAPI: RKRTC.RKRCTProvider
@_inheritsConvenienceInitializers public class RKRCTProvider : Moya.MoyaProvider<RKRTC.RKAPIs> {
  @discardableResult
  public func requestCombine(_ target: RKRTC.RKAPIs, _ completion: @escaping RKRTC.RKCompletion) -> Moya.Cancellable
  @discardableResult
  override public func request(_ target: RKRTC.RKAPIs, callbackQueue: Dispatch.DispatchQueue? = .none, progress: Moya.ProgressBlock? = .none, completion: @escaping Moya.Completion) -> Moya.Cancellable
  override public init(endpointClosure: @escaping Moya.MoyaProvider<RKRTC.RKAPIs>.EndpointClosure = super, requestClosure: @escaping Moya.MoyaProvider<RKRTC.RKAPIs>.RequestClosure = super, stubClosure: @escaping Moya.MoyaProvider<RKRTC.RKAPIs>.StubClosure = super, callbackQueue: Dispatch.DispatchQueue? = nil, session: Moya.Session = super, plugins: [Moya.PluginType] = super, trackInflights: Swift.Bool = super)
  @objc deinit
}
public enum RKAPIs {
  case checkToken(_: Swift.String)
  case channelCreate(userIdList: [Swift.String]?, password: Swift.String?, thirdChannelId: Swift.String?, channelName: Swift.String?, channelSubject: Swift.String?, extraParams: Swift.String?, recordParams: Swift.String?, remark: Swift.String?, maxMembers: Swift.Int32 = 16, maxResolution: RKRTC.RKMaxResolution = .Resolution_360P)
  case channelJoin(channelId: Swift.String, password: Swift.String?, sdpOffer: Swift.String, mediaDeviceInfo: Swift.String)
  case channelInvite(channelId: Swift.String, userIdList: [Swift.String])
  case channelLeave(channelId: Swift.String)
  case channelEnd(channelId: Swift.String)
  case channelKick(channelId: Swift.String, userIdList: [Swift.String])
  case channelRefuse(channelId: Swift.String, refuseState: Swift.String)
  case channelSetExtraParams(channelId: Swift.String, extraParams: Swift.String)
  case channelGetExtraParams(channelId: Swift.String)
  case channelSubscribe(channelId: Swift.String, userId: Swift.String, stream: Swift.String = "low")
  case channelSubscribeAnswer(channelId: Swift.String, sdpAnswer: Swift.String, userId: Swift.String)
  case channelUnsubscribe(channelId: Swift.String, userIdList: [Swift.String])
  case channelSwitchStream(channelId: Swift.String, userId: Swift.String, stream: Swift.String = "low")
  case channelUpdateMediaDeviceInfo(channelId: Swift.String, mediaDeviceInfo: Swift.String)
  case channelGetSpaceUserList(channelId: Swift.String)
  case getChannelList
  case channelReconnection(channelId: Swift.String, sdpOffer: Swift.String?, subscribeUserIdList: [Swift.String])
  case screenShareSwitch(channelId: Swift.String, screenShare: Swift.String)
  case getScreenShare(channelId: Swift.String)
}
extension RKRTC.RKAPIs : Moya.TargetType {
  public var describeString: Swift.String {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: Moya.Method {
    get
  }
  public var logLevel: RKILogger.RKLogLevel {
    get
  }
  public var task: Moya.Task {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class RKBaseResponse {
  public var success: Swift.Bool
  public var errorCode: Swift.Int {
    get
    set
  }
  public var errorMsg: Swift.String
  public var data: Any?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKJoinedChannel : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String
  @objc public var password: Swift.String
  @objc public var channelName: Swift.String?
  @objc public var channelSubject: Swift.String?
  public var maxMembers: Swift.Int32?
  public var maxResolution: RKRTC.RKMaxResolution?
  @objc public var extraParams: Swift.String?
  @objc public var recordParams: Swift.String?
  @objc public var remark: Swift.String?
  @objc public var membersList: [RKRTC.RKChannelUserInfo]?
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMediaDevice : ObjectiveC.NSObject {
  @objc public var frontCamera: Swift.Bool
  @objc public var isLightOn: Swift.Bool {
    @objc get
  }
  @objc deinit
  @objc public func startCapture()
  @objc public func stopCapture()
  @objc public func switchCamera()
  @objc public func lightTurn(_ turnOn: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc override dynamic public init()
}
extension RKRTC.RKMediaDevice : WebRTC.RTCVideoRenderer {
  @objc dynamic public func renderFrame(_ frame: WebRTC.RTCVideoFrame?)
  @objc dynamic public func setSize(_ size: CoreGraphics.CGSize)
}
extension RKRTC.RKMediaDevice : RKRTC.RKVideoFrameConsumer {
  @objc dynamic public func consumeByteBufferFrame(buffer: CoreVideo.CVPixelBuffer, format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
  @objc dynamic public func consumeByteArrayFrame(data: [Swift.UInt8], format: RKRTC.RKVideoFormat, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation, timestamp: Swift.Int64)
}
extension RKRTC.RKMediaDevice : RKRTC.RKAudioConsumer {
  @objc dynamic public func consumeByteBufferFrame(inputId: Swift.String, sampleRateHz: Swift.Int32, channels: Swift.Int32, data: Swift.Int8, playDelayMS: Swift.Int32, recDelayMS: Swift.Int32, clockDrift: Swift.Int32)
}
extension RKRTC.RKRTCAPIManager : RKRTC.RKRTCAPIProtocol {
  @objc public static let shared: RKRTC.RKRTCAPIManager
  @objc public static var token: Swift.String
  @objc dynamic public func checkToken(token: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelCreate(userIdList: [Swift.String]?, password: Swift.String?, thirdChannelId: Swift.String?, channelName: Swift.String?, channelSubject: Swift.String?, extraParams: Swift.String?, recordParams: Swift.String?, remark: Swift.String?, maxMembers: Swift.Int, maxResolution: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelJoin(channelId: Swift.String, password: Swift.String?, sdpOffer: Swift.String, mediaDeviceInfo: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelInvite(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelLeave(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelEnd(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelKick(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelRefuse(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelBusy(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSetExtraParams(channelId: Swift.String, extraParams: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelGetExtraParams(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSubscribe(channelId: Swift.String, userId: Swift.String, isHighStram: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSubscribeAnswer(channelId: Swift.String, sdpAnswer: Swift.String, userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelUnsubscribe(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelSwitchStream(channelId: Swift.String, userId: Swift.String, isHighStram: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelUpdateMediaDeviceInfo(channelId: Swift.String, mediaDeviceInfo: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelGetSpaceUserList(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getChannelList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func channelReconnection(channelId: Swift.String, sdpOffer: Swift.String?, subscribeUserIdList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func startScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func stopScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getScreenShare(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
public enum RKWSMessageType : Swift.String, RKIHandyJSON.HandyJSONEnum {
  case HEARTBEAT
  case CHANNEL_ACTION
  case FORWARD
  case ICE_CANDIDATE
  case MEDIA_DEVICE
  case EXTRA_PARAMS
  case AGAIN_SUBSCRIBE
  case SCREEN_SHARE
  case SOCKET
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum RKChannelOperationType : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case NONE
  case CREATE
  case INVITE
  case JOIN
  case LEAVE
  case KICK
  case REFUSE
  case END
  public typealias RawValue = Swift.String
  public var rawValue: RKRTC.RKChannelOperationType.RawValue {
    get
  }
  public init?(rawValue: RKRTC.RKChannelOperationType.RawValue)
}
@objc public enum RKRTCConnectionState : ObjectiveC.NSInteger, RKIHandyJSON.HandyJSONEnum {
  case New
  case Checking
  case Connected
  case Completed
  case Failed
  case Disconnected
  case Closed
  case Count
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public enum RKScaleType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case SCALE_ASPECT_FIT = 0
  case SCALE_ASPECT_FILL
  case SCALE_ASPECT_BALANCED
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum RKMaxResolution : Swift.String, RKIHandyJSON.HandyJSONEnum {
  case Resolution_144P
  case Resolution_288P
  case Resolution_360P
  case Resolution_480P
  case Resolution_720P
  case Resolution_1080P
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum RKVideoRotation : ObjectiveC.NSInteger, RKIHandyJSON.HandyJSONEnum {
  case VideoRotation_0 = 0
  case VideoRotation_90 = 90
  case VideoRotation_180 = 180
  case VideoRotation_270 = 270
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public enum RKVideoFormat : ObjectiveC.NSInteger, RKIHandyJSON.HandyJSONEnum {
  case I420 = 1
  case IYUV = 2
  case RGB24 = 3
  case ABGR = 4
  case ARGB = 5
  case ARGB444 = 6
  case RGB565 = 7
  case ARGB1555 = 8
  case YUY2 = 9
  case YV12 = 10
  case UYVY = 11
  case MJPG = 12
  case NV21 = 13
  case NV12 = 14
  case BGRA = 15
  case H264 = 16
  case H264_SVC = 17
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public enum RKSocketCode : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case relogin = 20001
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  public var messageType: RKRTC.RKWSMessageType?
  @objc public var messageData: Any?
  @objc public var messageId: Swift.String?
  @objc public var timestamp: Swift.Int64
  @objc public var channelId: Swift.String?
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class RKWebRTC : ObjectiveC.NSObject, RKRTC.RKWebRTCInterface {
  @objc final public var autoSubscribe: Swift.Bool
  @objc final public var rtcDevice: RKRTC.RKMediaDevice
  @objc final public var rtcChannel: RKRTC.RKRTCChannel
  @objc deinit
  @objc override dynamic public init()
}
extension RKRTC.RKWebRTC {
  @objc final public func login(saasUrl: Swift.String, wssUrl: Swift.String, userId: Swift.String, token: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func enableCamera(_ enableCamera: Swift.Bool)
  @objc final public func switchCamera()
  @objc final public func setCameraTorchOn(_ isOn: Swift.Bool, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func setAudioRouteSpeakerphone(_ speakerphone: Swift.Bool)
  @objc final public func enableAudio(_ enableAudio: Swift.Bool)
  @objc final public func refuse(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func setPublishResolution(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32 = 15)
  @objc final public func dissolutionChannel(_ channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func addRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc final public func removeRtcClientListener(_ listener: RKRTC.RKRtcClientListener)
  @objc final public func addCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc final public func removeCallEventHandler(_ listener: RKRTC.RKCallEventHandler)
  @objc final public func setVideoSource(_ source: RKRTC.RKVideoSource)
  @objc final public func stopVideoSource()
  @objc final public func setAudioSource(_ source: RKRTC.RKAudioSource)
  @objc final public func receiveAudio(userId: Swift.String, isEnabled: Swift.Bool)
  @objc final public func receiveVideo(userId: Swift.String, isEnabled: Swift.Bool)
  @objc final public func adjustPlaybackVolume(_ volume: Swift.Double)
  @objc final public func findJoinedChannel(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc final public func focus(xPercent: Swift.Float, yPercent: Swift.Float)
  @objc final public func leave(channelId: Swift.String)
  @objc final public func dispose()
}
extension RKRTC.RKWebRTC : RKRTC.RKWSDelegate {
  @objc final public func webSocketStateDidChange(state: RKRTC.RKWSState, error: Foundation.NSError?)
  @objc final public func webSocketDidReceive(data: Foundation.Data?, message: RKRTC.RKRTCMessage)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCChannel : ObjectiveC.NSObject {
  @objc public var channelId: Swift.String
  @objc public var channelTitle: Swift.String
  @objc public var channelUserList: [RKRTC.RKChannelUserInfo]
  @objc public var videoViews: [Swift.String : UIKit.UIView]
  @objc public var autoSubscribe: Swift.Bool
  public var trackSuccesBlockDict: [Swift.String : (() -> Swift.Void)]
  @objc deinit
  @objc override dynamic public init()
}
extension RKRTC.RKRTCChannel : RKRTC.RKRTCChannelInterface {
  @objc dynamic public func join(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func realJoin(channelId: Swift.String, audio: Swift.Bool, video: Swift.Bool, password: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func leave(_ channelId: Swift.String?, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func invite(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func kick(userIds: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func subscribe(userId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func unSubscribe(userList: [Swift.String], onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func switchStream(userId: Swift.String, isHighStram: Swift.Bool = false, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getLocalVideoView(_ scaleType: RKRTC.RKScaleType = .SCALE_ASPECT_FIT) -> UIKit.UIView?
  @objc dynamic public func getRemoteVideoView(userId: Swift.String, scaleType: RKRTC.RKScaleType = .SCALE_ASPECT_FIT, compeletBlock: (UIKit.UIView?) -> Swift.Void)
  @objc dynamic public func takeSnapshot(userId: Swift.String, filePath: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func publishLocalAudioStream(_ publish: Swift.Bool)
  @objc dynamic public func publishLocalVideoStream(_ publish: Swift.Bool)
  @objc dynamic public func setChannelEventHandler(_ channelEventHandler: RKRTC.RKChannelEventHandler?)
  @objc dynamic public func setExtraParams(_ extras: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func getExtraParams(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
  @objc dynamic public func sendChannelMsg(msg: Swift.String)
  @objc dynamic public func startScreenShare(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc dynamic public func stopScreenShare()
  @objc dynamic public func getChannelUserList() -> [RKRTC.RKChannelUserInfo]
  @objc dynamic public func getSpaceUserList(onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
extension RKRTC.RKRTCChannel {
  @objc dynamic public func stop(channelId: Swift.String, onSuccess: RKRTC.RKOnSuccess?, onFailed: RKRTC.RKOnFailed?)
}
extension RKRTC.RKRTCChannel : WebRTC.RTCPeerConnectionDelegate {
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange stateChanged: WebRTC.RTCSignalingState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didAdd stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove stream: WebRTC.RTCMediaStream)
  @objc dynamic public func peerConnectionShouldNegotiate(_ peerConnection: WebRTC.RTCPeerConnection)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceConnectionState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCIceGatheringState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didGenerate candidate: WebRTC.RTCIceCandidate)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove rtpReceiver: WebRTC.RTCRtpReceiver)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didRemove candidates: [WebRTC.RTCIceCandidate])
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChangeStandardizedIceConnectionState newState: WebRTC.RTCIceConnectionState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChangeLocalCandidate local: WebRTC.RTCIceCandidate, remoteCandidate remote: WebRTC.RTCIceCandidate, lastReceivedMs lastDataReceivedMs: Swift.Int32, changeReason reason: Swift.String)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didOpen dataChannel: WebRTC.RTCDataChannel)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didChange newState: WebRTC.RTCPeerConnectionState)
  @objc dynamic public func peerConnection(_ peerConnection: WebRTC.RTCPeerConnection, didAdd rtpReceiver: WebRTC.RTCRtpReceiver, streams mediaStreams: [WebRTC.RTCMediaStream])
}
extension RKRTC.RKRTCChannel : WebRTC.RTCVideoViewDelegate {
  @objc dynamic public func videoView(_ videoView: WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreGraphics.CGSize)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelUserInfoList : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var userId: Swift.String
  @objc public var mediaDeviceInfo: RKRTC.RKMediaDeviceInfo?
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelUserInfo : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var userId: Swift.String
  @objc public var mediaDeviceInfo: RKRTC.RKMediaDeviceInfo?
  @objc required override dynamic public init()
  @objc deinit
}
@objc @objcMembers final public class RKWSClient : ObjectiveC.NSObject, RKRTC.RKWSProtocol {
  @objc weak final public var delegate: RKRTC.RKWSDelegate?
  @objc final public var autoReconnect: Swift.Bool
  @objc final public var isNeedReconnect: Swift.Bool
  @objc deinit
  @objc public init(wsServer: Foundation.URL)
  @objc final public func send(data: Foundation.Data)
  @objc final public func send(dataString: Swift.String)
}
extension RKRTC.RKWSClient : Starscream.WebSocketDelegate {
  final public func didReceive(event: Starscream.WebSocketEvent, client: Starscream.WebSocket)
}
extension RKRTC.RKWSClient {
  @objc final public func connect()
  @objc final public func disconnect()
  @objc final public func close()
  @objc final public func reconnect()
}
extension RKRTC.RKWSState : Swift.Equatable {}
extension RKRTC.RKWSState : Swift.Hashable {}
extension RKRTC.RKWSState : Swift.RawRepresentable {}
extension RKRTC.RKRTCCode : Swift.Equatable {}
extension RKRTC.RKRTCCode : Swift.Hashable {}
extension RKRTC.RKRTCCode : Swift.RawRepresentable {}
extension RKRTC.RKWSMessageType : Swift.Equatable {}
extension RKRTC.RKWSMessageType : Swift.Hashable {}
extension RKRTC.RKWSMessageType : Swift.RawRepresentable {}
extension RKRTC.RKChannelOperationType : Swift.Equatable {}
extension RKRTC.RKChannelOperationType : Swift.Hashable {}
extension RKRTC.RKChannelOperationType : Swift.RawRepresentable {}
extension RKRTC.RKRTCConnectionState : Swift.Equatable {}
extension RKRTC.RKRTCConnectionState : Swift.Hashable {}
extension RKRTC.RKRTCConnectionState : Swift.RawRepresentable {}
extension RKRTC.RKScaleType : Swift.Equatable {}
extension RKRTC.RKScaleType : Swift.Hashable {}
extension RKRTC.RKScaleType : Swift.RawRepresentable {}
extension RKRTC.RKMaxResolution : Swift.Equatable {}
extension RKRTC.RKMaxResolution : Swift.Hashable {}
extension RKRTC.RKMaxResolution : Swift.RawRepresentable {}
extension RKRTC.RKVideoRotation : Swift.Equatable {}
extension RKRTC.RKVideoRotation : Swift.Hashable {}
extension RKRTC.RKVideoRotation : Swift.RawRepresentable {}
extension RKRTC.RKVideoFormat : Swift.Equatable {}
extension RKRTC.RKVideoFormat : Swift.Hashable {}
extension RKRTC.RKVideoFormat : Swift.RawRepresentable {}
extension RKRTC.RKSocketCode : Swift.Equatable {}
extension RKRTC.RKSocketCode : Swift.Hashable {}
extension RKRTC.RKSocketCode : Swift.RawRepresentable {}
